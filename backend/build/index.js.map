{"version":3,"sources":["../src/index.ts","../src/config/cloudinary.config.ts","../src/schemas/env.schema.ts","../src/config/env.config.ts","../src/utils/error.utils.ts","../src/middlewares/error.middleware.ts","../src/passport/google.strategy.ts","../src/constants/file.constant.ts","../src/lib/prisma.lib.ts","../src/routes/attachment.router.ts","../src/utils/auth.util.ts","../src/config/firebase.config.ts","../src/firebase-admin-cred.json","../src/constants/notification-title.contant.ts","../src/utils/generic.ts","../src/utils/socket.util.ts","../src/controllers/attachment.controller.ts","../src/middlewares/multer.middleware.ts","../src/middlewares/verify-token.middleware.ts","../src/routes/auth.router.ts","../src/controllers/auth.controller.ts","../src/middlewares/validate.middleware.ts","../src/schemas/auth.schema.ts","../src/routes/chat.router.ts","../src/schemas/chat.schema.ts","../src/utils/chat.util.ts","../src/controllers/chat.controller.ts","../src/middlewares/file-validation.middleware.ts","../src/routes/message.router.ts","../src/controllers/message.controller.ts","../src/routes/request.router.ts","../src/controllers/request.controller.ts","../src/schemas/request.schema.ts","../src/routes/user.router.ts","../src/config/nodemailer.config.ts","../src/constants/emails/email.layout.ts","../src/constants/emails/email.body.ts","../src/constants/emails/email.subject.ts","../src/utils/email.util.ts","../src/controllers/user.controller.ts","../src/middlewares/socket-auth.middleware.ts","../src/socket/webrtc/socket.ts","../src/socket/socket.ts"],"sourcesContent":["import cookieParser from 'cookie-parser'\nimport cors from 'cors'\nimport express, { Request, Response } from 'express'\nimport { createServer } from 'http'\nimport morgan from 'morgan'\nimport passport from 'passport'\nimport { Server } from 'socket.io'\nimport './config/cloudinary.config.js'\nimport { config } from './config/env.config.js'\nimport { errorMiddleware } from './middlewares/error.middleware.js'\nimport './passport/google.strategy.js'\nimport { checkEnvVariables, env } from './schemas/env.schema.js'\n\nimport attachmentRoutes from './routes/attachment.router.js'\nimport authRoutes from './routes/auth.router.js'\nimport chatRoutes from './routes/chat.router.js'\nimport messageRoutes from './routes/message.router.js'\nimport requestRoutes from './routes/request.router.js'\nimport userRoutes from './routes/user.router.js'\n\nimport { socketAuthenticatorMiddleware } from './middlewares/socket-auth.middleware.js'\nimport registerSocketHandlers from './socket/socket.js'\n\n\n// environment variables validation\ncheckEnvVariables();\n\nconst app=express()\nconst server=createServer(app)\nconst io=new Server(server,{cors:{credentials:true,origin:config.clientUrl}})\n\n// global\napp.set(\"io\",io)\n\n// userSocketIds\nexport const userSocketIds = new Map<string,string>()\n\n// middlewares\napp.use(cors({credentials:true,origin:config.clientUrl}))\napp.use(passport.initialize())\napp.use(express.json())\napp.use(cookieParser())\napp.use(morgan('tiny'))\n\n\n// route middlewares\napp.use(\"/api/v1/auth\",authRoutes)\napp.use(\"/api/v1/chat\",chatRoutes)\napp.use(\"/api/v1/user\",userRoutes)\napp.use(\"/api/v1/request\",requestRoutes)\napp.use(\"/api/v1/message\",messageRoutes)\napp.use(\"/api/v1/attachment\",attachmentRoutes)\n\nio.use(socketAuthenticatorMiddleware)\n\n\napp.get(\"/\",(_:Request,res:Response)=>{\n    res.status(200).json({running:true})\n})\n\n// error middleware\napp.use(errorMiddleware)\n\n// Register Socket.IO event handlers\nregisterSocketHandlers(io);\n\nserver.listen(env.PORT,()=>{\n    console.log(`server [STARTED] ~ http://localhost:${env.PORT}`);\n    if(env.NODE_ENV==='PRODUCTION'){\n        console.log('Started in PRODUCTION mode');\n    }\n    else{\n        console.log('Started in DEVELOPMENT mode');\n    }\n})","import {v2 as cloudinary} from 'cloudinary'\nimport { env } from '../schemas/env.schema.js'\n\ncloudinary.config({\n    cloud_name:env.CLOUDINARY_CLOUD_NAME,\n    api_key:env.CLOUDINARY_API_KEY,\n    api_secret:env.CLOUDINARY_API_SECRET\n})","import { config } from \"dotenv\";\nimport { z } from \"zod\";\n\n// Load the correct .env file based on NODE_ENV\nconst envFile = `.env.${process.env.NODE_ENV === \"DEVELOPMENT\" ? \"development\" : \"production\"}`;\nconfig({ path: envFile });\n\nconst envSchema = z.object({\n    NODE_ENV: z.enum(['DEVELOPMENT', 'PRODUCTION']).default(\"DEVELOPMENT\"),\n    PORT: z.string({ required_error: \"PORT is required\" })\n        .max(4, 'Port cannot be more than 4 digits')\n        .min(4, 'Port number cannot be lesser than 4 digits'),\n    JWT_SECRET: z.string({ required_error: \"JWT_SECRET is required\" }),\n    JWT_TOKEN_EXPIRATION_DAYS: z.string({ required_error: \"JWT_TOKEN_EXPIRATION_DAYS is required\" })\n        .min(1, 'JWT_TOKEN_EXPIRATION_DAYS cannot be less than 1'),\n    EMAIL: z.string().email(\"Please provide a valid email\"),\n    PASSWORD: z.string({ required_error: \"Password for email is required\" }),\n    OTP_EXPIRATION_MINUTES: z.string({ required_error: \"OTP_EXPIRATION_MINUTES is required\" }),\n    PASSWORD_RESET_TOKEN_EXPIRATION_MINUTES: z.string({ required_error: \"PASSWORD_RESET_TOKEN_EXPIRATION_MINUTES is required\" }),\n    CLOUDINARY_CLOUD_NAME: z.string({ required_error: \"CLOUDINARY_CLOUD_NAME is required\" }),\n    CLOUDINARY_API_KEY: z.string({ required_error: \"CLOUDINARY_API_KEY is required\" }),\n    CLOUDINARY_API_SECRET: z.string({ required_error: \"CLOUDINARY_API_SECRET is required\" }),\n    GOOGLE_CLIENT_ID: z.string({ required_error: \"GOOGLE_CLIENT_ID is required\" }),\n    GOOGLE_CLIENT_SECRET: z.string({ required_error: \"GOOGLE_CLIENT_SECRET is required\" }),\n    GOOGLE_APPLICATION_CREDENTIALS: z.string({ required_error: \"GOOGLE_APPLICATION_CREDENTIALS is required\" }),\n    PRIVATE_KEY_RECOVERY_SECRET: z.string({ required_error: \"PRIVATE_KEY_RECOVERY_SECRET is required\" }),\n    DATABASE_URL: z.string({ required_error: \"DATABASE_URL is required\" }),\n    DIRECT_URL: z.string({ required_error: \"DIRECT_URL is required\" })\n});\n\n\nexport const checkEnvVariables = () => {\n    const parsedEnv = envSchema.safeParse(process.env);\n    if (!parsedEnv.success) {\n        console.error(\"❌ Invalid environment variables:\", parsedEnv.error.flatten().fieldErrors);\n        process.exit(1);\n    }\n    return parsedEnv.data;\n};\n\nexport const env = checkEnvVariables();\n\n\n\n\n\n","import type { IConfig } from \"../interfaces/config/config.interface.js\"\nimport { env } from \"../schemas/env.schema.js\"\n\nconst developmentConfig:IConfig = {\n    clientUrl:\"http://localhost:3000\",\n    callbackUrl:`http://localhost:${env.PORT}/api/v1/auth/google/callback`,\n}\n\nconst productionConfig:IConfig = {\n    clientUrl:\"https://mernchat.in\",\n    callbackUrl:\"https://aesehi.online/api/v1/auth/google/callback\"\n}\n\nexport const config = env.NODE_ENV==='DEVELOPMENT'?developmentConfig:productionConfig","import { NextFunction, Request, Response } from 'express'\nimport type { AuthenticatedRequest } from '../interfaces/auth/auth.interface.js'\n\nexport class CustomError extends Error {\n    constructor(message:string='Interval Server Error', public statusCode:number=500){\n        super(message)\n    }\n}\n\nexport const asyncErrorHandler = (func:(req:Request | AuthenticatedRequest | any ,res:Response,next:NextFunction)=>Promise<void | Response>) => async(req:Request,res:Response,next:NextFunction)=>{\n    try {\n        await func(req,res,next)\n    } catch (error) {\n        next(error)\n    }\n}","import { NextFunction, Request, Response } from \"express\";\nimport { CustomError } from \"../utils/error.utils.js\";\nimport { ZodError } from \"zod\";\nimport jwt from 'jsonwebtoken'\nimport { MulterError } from \"multer\";\n\nexport const errorMiddleware = (err:CustomError | ZodError | Error | jwt.TokenExpiredError | jwt.JsonWebTokenError | MulterError ,req:Request,res:Response,next:NextFunction) => {\n    console.log(err);\n    let message;\n    let statusCode=500;\n\n    if(err instanceof ZodError){\n        message=(err.issues.map(issue=>issue.message)).join(\", \")\n        statusCode=400\n    }\n\n    else if(err instanceof CustomError){\n        message = err.message\n        statusCode = err.statusCode\n    }\n\n    else if(err instanceof Error){\n        message = err.message\n        statusCode = 500\n\n        if (err instanceof jwt.TokenExpiredError) {\n            statusCode=401\n            message=\"Token expired, please login again\"\n        } \n        if (err instanceof jwt.JsonWebTokenError) {\n            statusCode=401\n            message=\"Invalid Token, please login again\"\n        } \n\n        if(err instanceof MulterError){\n\n            if(err.code === 'LIMIT_UNEXPECTED_FILE'){\n                statusCode=400\n                message='Too many files uploaded. Maximum 5 files allowed.'\n            }\n        }\n    }\n\n    else {\n        return res.status(500).json({ message: \"Internal Server Error\" });\n    }\n    \n    return res.status(statusCode).json({message})\n}","import bcrypt from 'bcryptjs';\nimport passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { config } from '../config/env.config.js';\nimport { DEFAULT_AVATAR } from '../constants/file.constant.js';\nimport { prisma } from '../lib/prisma.lib.js';\nimport { env } from '../schemas/env.schema.js';\n\npassport.use(new GoogleStrategy({\n    clientID: env.GOOGLE_CLIENT_ID,\n    clientSecret: env.GOOGLE_CLIENT_SECRET,\n    callbackURL:config.callbackUrl\n  },\n\n  async function (accessToken, refreshToken, profile, done){\n\n    try {\n      if(profile.emails && profile.emails[0].value && profile.displayName){\n\n          const isExistingUser = await prisma.user.findUnique({where:{email:profile.emails[0].value}})\n\n          if(isExistingUser){\n            const transformedUser = {\n              id:isExistingUser.id,\n              username:isExistingUser.username,\n              name:isExistingUser.name,\n              avatar:isExistingUser.avatar,\n              email:isExistingUser.email,\n              emailVerified:isExistingUser.emailVerified,\n              newUser:false,\n              googleId:profile.id\n            }\n            done(null,transformedUser)\n          }\n          else{\n            let avatarUrl = DEFAULT_AVATAR\n            if(profile.photos && profile.photos[0].value){\n              avatarUrl=profile.photos[0].value\n            }\n            const newUser = await prisma.user.create({\n              data:{\n                username:profile.displayName,\n                name:profile.name?.givenName!,\n                avatar:avatarUrl,\n                email:profile.emails[0].value,\n                hashedPassword:await bcrypt.hash(profile.id,10),\n                emailVerified:true,\n                oAuthSignup:true,\n                googleId:profile.id\n              },\n              select:{\n                id:true,\n                username:true,\n                name:true,\n                avatar:true,\n                email:true,\n                emailVerified:true,\n                googleId:true\n              }\n            })\n            done(null,{...newUser,newUser:true})\n          }\n      }\n      else{\n        throw new Error(\"Some Error occured\")\n      }\n    } catch (error) {\n      console.log(error);\n      done('Some error occured',undefined)\n    }\n  }\n));","export const MAX_FILE_SIZE = 5 * 1024 * 1024\nexport const ACCEPTED_IMAGE_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\nexport const DEFAULT_AVATAR = \"https://res.cloudinary.com/dh5fjdce9/image/upload/v1717842288/defaultAvatar_q2y2az.png\"\nexport const ACCEPTED_FILE_MIME_TYPES = [\"application/pdf\",\"application/msword\",...ACCEPTED_IMAGE_TYPES]","import { PrismaClient } from \"@prisma/client\";\n\nexport const prisma: PrismaClient = new PrismaClient({\n  // log: [\"query\"],\n});\n","import { Router } from \"express\";\nimport { fetchAttachments, uploadAttachment } from \"../controllers/attachment.controller.js\";\nimport { upload } from \"../middlewares/multer.middleware.js\";\nimport { verifyToken } from \"../middlewares/verify-token.middleware.js\";\n\nexport default Router()\n\n.post(\"/\",verifyToken,upload.array(\"attachments[]\",5),uploadAttachment)\n.get(\"/:id\",verifyToken,fetchAttachments)","import { v2 as cloudinary } from 'cloudinary';\nimport { convertBufferToBase64 } from './generic.js';\n\n\nconst thirtyDaysInMilliseconds = 30 * 24 * 60 * 60 * 1000;\n\n// const cookieOptions:CookieOptions = {\n//     maxAge:thirtyDaysInMilliseconds,\n//     httpOnly:true,\n//     path:\"/\",\n//     priority:\"high\",\n//     secure:true,\n//     sameSite:env.NODE_ENV==='DEVELOPMENT'?\"lax\":\"none\",\n//     domain: env.NODE_ENV === 'DEVELOPMENT' ? 'localhost' : 'aesehi.online',\n//     partitioned:true,\n// }\n\nexport const uploadFilesToCloudinary = async({files}:{files:Express.Multer.File[]})=>{\n    try {\n        const uploadPromises = files.map(file=>cloudinary.uploader.upload(file.path))\n        const result = await Promise.all(uploadPromises)\n        return result\n    } catch (error) {\n        console.log('Error uploading files to cloudinary');\n        console.log(error);\n    }\n}\n\nexport const deleteFilesFromCloudinary = async({publicIds}:{publicIds:string[]}):Promise<any[] | undefined>=>{\n    try {\n        await cloudinary.uploader.destroy(publicIds[0])\n        const deletePromises = publicIds.map(publicId=>cloudinary.uploader.destroy(publicId))\n        const uploadResult = await Promise.all(deletePromises)\n        return uploadResult\n    } catch (error) {\n        console.log('Error deleting files from cloudinary');\n        console.log(error);\n    }\n}\n\nexport const uploadEncryptedAudioToCloudinary = async ({buffer}: {buffer: Uint8Array<ArrayBuffer>}): Promise<any | undefined> => {\n    try {\n      const base64Audio = `data:audio/webm;base64,${convertBufferToBase64(buffer)}`; // Adjust MIME type if needed\n      const uploadResult = await cloudinary.uploader.upload(base64Audio, {\n        resource_type: \"raw\", // \"raw\" for non-standard formats (or \"video\" for MP4)\n        folder: \"encrypted-audio\",\n      });\n      return uploadResult;\n    } catch (error) {\n      console.error(\"Error uploading encrypted audio to Cloudinary:\", error);\n    }\n};\n\nexport const uploadAudioToCloudinary = async ({buffer}: {buffer: Uint8Array<ArrayBuffer>}): Promise<any | undefined> => {\n    try {\n      const base64Audio = `data:audio/webm;base64,${convertBufferToBase64(buffer)}`; // Adjust MIME type if needed\n      const uploadResult = await cloudinary.uploader.upload(base64Audio, {\n        resource_type: \"raw\", // \"raw\" for non-standard formats (or \"video\" for MP4)\n        folder: \"group-audio\",\n      });\n      return uploadResult;\n    } catch (error) {\n      console.error(\"Error uploading audio to Cloudinary:\", error);\n    }\n};\n\nexport const getSecureUserInfo = (user:any):any=>{\n    return {\n        id:user._id,\n        name:user.name,\n        username:user.username,\n        avatar:user.avatar?.secureUrl,\n        email:user.email,\n        createdAt:user.createdAt,\n        updatedAt:user.updatedAt,\n        verified:user.verified,\n        publicKey:user?.publicKey,\n        notificationsEnabled:user.notificationsEnabled,\n        verificationBadge:user.verificationBadge,\n        fcmTokenExists:user.fcmToken?.length?true:false,\n        oAuthSignup:user.oAuthSignup\n    }\n}","import admin from \"firebase-admin\";\nimport credentials from \"../firebase-admin-cred.json\" with { type: \"json\" };\n\n// Define the type for serviceAccount\nconst serviceAccount: admin.ServiceAccount = {\n  projectId: credentials.project_id,\n  privateKey: credentials.private_key,\n  clientEmail: credentials.client_email,\n};\n\n// Initialize Firebase Admin SDK\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n  });\n}\n\nexport const messaging = admin.messaging();\n","{\r\n    \"type\": \"service_account\",\r\n    \"project_id\": \"chat-app-d94f3\",\r\n    \"private_key_id\": \"c27f16d0dd01d8d3f42c1a05170df99624e8471c\",\r\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC20v7LgTjCS+is\\nz+WMe4edsPNClsqagDuA7PIoiMCJ0xwxvyMZ5Fhv5M6rEcIZOmwzNfelUBOwRYLc\\naJc1x+jF56yi3S5lRvMbKHUGkvG8IxnTXIgywDgnBnibmnTBLSxyv9caKl64XH4A\\nh8cPD6EtOT8AbAxmLvgIYiDv3q4TiQNK3hHYZD+5qjiH+bolrpFK5xIEVpPTWvNL\\n5ai9Ay+6342kUX4Q+X8h0P74S4skR9EngcT7d+xUIy7JGUb30/pW2PZg8mhVlNi8\\nslD3FBuECTMUiW0cMCjv0ApsqF73OQCcj4/9xJ+xSFHhGtNVpWEzWzhi+9bdo67/\\n41TNXYWtAgMBAAECggEAG0fBC7Z6CjVlKu2QsqriJyEhg1+t1r++C/RkrrC3445T\\n/YZTDgjZO2/DI5qwQa8f4xpb8YJ76vMhs5LgcVQlreuZLT+KLe7tgAbEQ5lcpzao\\n+ArYKz6B19eVhUksaoDmSi8fFpaY8LNN0qAauhVvzFLnouqnL6jgNkayOdNwBUD3\\n0ssP5bc1lGGIi5iYxoFOZvQYckjeX0kVnnuHLQXWEnAxqJ9QzNWE2R0Am1CZz8uC\\nol/dIxRQM9XBBznMryCUmHmSzaBXsNajqfuMLncJZCJi1p5Z9FiAtBCdiGl6UwAy\\nz0pmGrAup8SKq1F+fwK0mt8cuyv45JTw/in0ebtmbwKBgQDxxZNFwQ1WpCmjdXqO\\nuCbrbLwYDe0ZCjjQ9o3n34PHjgyzdyqx7v7LrMxpGSLS5UMx0q9bk3dJKVwfCyxv\\n+tM8+Ekkazdg6I3flgJmelmRD4O1PccBfQLAyWZfyFk8fOc4J1RcLzxInrfBirMm\\nDSqSiXqnVksQxSr0d4X9yfJPDwKBgQDBlVekLgQCgmDelfAJF7ULDW/WDtzj8YS/\\n4DNe0pKHDb9lIDUIFdv1ctla8xjTh+TRXpLEo2/STADKyhAuvloNtn+S38j/86Ba\\n42LvWgYdzYdJFMiTH62VDosHKuhsTzDBbwsckSsAeOlbcsX+IlHiLoQV3Y5PA61s\\nVx3CJG/fgwKBgQCIuoqyLR5k/EwMBBk+c0iXZZPuKpoGyjAdhQH1uwMkrOHj8KW1\\noQp5lwy29x8pk7xvhc3kBT61om1VpRUJcxlZZrS+ot/br0jkxEoxOEpE7jg3HGva\\nHJ+c9Yku6/gDbEO7Dwr3Y0M9cn1LOCxefZ2w54z066liH49OV/Xv8/BT4wKBgH7g\\nrSKUblher7LzvvGWsjheRDCeaTSVNZa1EbZSeWs/HXTgWSHFgfcroT41Gs55wQVg\\n4P00ybOh0NsY+OZKKKfYN2FCf3EScsVfR5btABlEfijuEFAtcQ3DDGhUPSXP+Xqu\\nly/QDckvdnNTlGVuhRCjwDq8jetH08CwkHaQfyqVAoGADSHMcz0Oy7CYPpI7t+NR\\n4jIfpmIAf5Rl9BIpHyutSrAeATXrvlixCBo+uC8E++DgiWlIo9Sn6xJGp+njN4C6\\nubzZCFGbo1WSHESXX3BXp8PHQ83+redDVMIU0H0ASraPNCt8cHGvuDnKZwnnFcwd\\n3mnKk+ejukTdQal5nsE1D9E=\\n-----END PRIVATE KEY-----\\n\",\r\n    \"client_email\": \"firebase-adminsdk-fbsvc@chat-app-d94f3.iam.gserviceaccount.com\",\r\n    \"client_id\": \"109684351450679293281\",\r\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\r\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\r\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\r\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40chat-app-d94f3.iam.gserviceaccount.com\",\r\n    \"universe_domain\": \"googleapis.com\"\r\n  }\r\n  ","export const notificationTitles = [\n    // \"📩 You've got a new message! Ready for some chat-desi delight?\",\n    // \"💬 Ding! Your chat order is up! Check your new message.\",\n    // \"🗨️ Hot and fresh message just for you. Don't let it get cold!\",\n    // \"📲 Chat's ready! Someone's waiting for your reply.\",\n    // \"🎉 Chat like a boss! You’ve got a new message.\",\n    // \"📬 Special delivery! New message served hot.\",\n    // \"💌 Your chat buddy just sent you a message. Dive in!\",\n    // \"📥 Message alert! Your chat session just got spicier.\",\n    // \"📨 Guess what? A new message just arrived. Yum!\",\n    // \"📧 Chat feast! There's a new message on the menu.\",\n    // \"🗨️ New message alert! Fresh and crispy, just for you.\",\n    // \"📲 Ready for a chat binge? You've got a new message.\",\n    // \"💬 Hello there! You've got a piping hot message.\",\n    // \"📩 Someone sent you a message. Time for some chat-tastic fun!\",\n    // \"📥 Ding! A new message has just been delivered to your chat inbox.\",\n    // \"🗨️ Fresh chat served! You've got a new message.\",\n    // \"📬 Chat cravings? Your message is here.\",\n    // \"💌 Inbox special! New message waiting for your reply.\",\n    // \"🎉 Chat is calling! You've got a new message.\",\n    // \"📧 It's chat o'clock! Check out your new message.\",\n    // \"📲 Ready for some chat goodness? You've got a new message.\",\n    // \"🗨️ Your chat platter is ready! Fresh message just for you.\",\n    // \"💬 Chat feast alert! New message on your screen.\",\n    // \"📩 Yum! Fresh message delivered to your inbox.\",\n    // \"📥 Chat special! New message ready for your reply.\",\n    // \"🎉 Get ready to chat! New message just arrived.\",\n    // \"📨 Hot and ready! You've got a new message.\",\n    // \"💬 Chat bonanza! New message just for you.\",\n    // \"📧 Inbox delight! Your new message is here.\",\n    // \"📲 A new message is ready to chat with you!\",\n    // \"🗨️ Time for some chat fun! You've got a new message.\",\n    // \"💌 Chat cravings? Your new message has arrived.\",\n    // \"📩 Ready for some chat magic? New message is here.\",\n    // \"📥 Inbox refresh! You've got a new message.\",\n    // \"📨 Surprise! A new message is waiting for you.\",\n    // \"🎉 Chat time! You've got a fresh message.\",\n    // \"📬 Message alert! Someone's waiting for your reply.\",\n    // \"💬 Your chat buddy just dropped you a message. Check it out!\",\n    // \"🗨️ Inbox special! New message served hot and fresh.\",\n    // \"📲 Chat delight! You've got a new message.\",\n    // \"📧 Ready for some chat fun? New message is here.\",\n    // \"💌 Chat cravings satisfied! New message just arrived.\",\n    // \"📩 Inbox treat! You've got a new message.\",\n    // \"📥 Your chat is ready! New message waiting for you.\",\n    // \"🎉 Chat celebration! You've got a new message.\",\n    // \"📨 Fresh and tasty message delivered to your inbox.\",\n    // \"🤖 System hang ek message se! Check it out! 🖥️\",\n    \"Sarkari naukari chaidiya? Miljugii! Message dhek lo. 📩📝\",\n    \"💌 Vo toh bhav nahi de rahi, message hi dekh lo phir. 📩\",\n    \"🚗 Navi gaadi chaidiya? Miljugii! Check your message now. 🚙\",\n    \"😠 Momos? Yeh kya hove?? Daal roti na kahi jaa rahi\",\n    \"☕ Dolly ki chai pilo or baatchit chalao\",\n    \"🏞 Hello pans, mein Kashmir mein hun or baatchit chala raha hun\",\n    \"🌟 Punnet superstar is calling you\",\n    \"😨 Thappad se dar nahi lagta sahab, message se lagta hai. 📩\",\n    \"😌 All is well! Naya message aa gaya hai. 💌\",\n    \"🧂 Kya aapke toothpaste mein namak hai? Aapke inbox mein message hai? 📩\",\n    \"💖 Pyar dosti hai, aur message bhi! 💬\",\n    \"💊 Mujhe drugs mat do, mujhe message do! 📨\",\n    \"🚗 Aaj mere paas gaadi hai, bangla hai, message hai. 📩💼\",\n    \"😢 Pushpa, I hate tears! Chat karne se sab theek ho jayega. 💬\",\n    \"🚀 Chak de phatte! Message aa gaya! 📩\",\n    \"🌞 Garmi itni ho rahi hai, message hi dhek lo! 🔥\",\n    \"Basanti, 🐕 in kutto ke samne chat mat karna!\",\n    \"Subah utho😎, instagram chalao🤳🏻, maar khao 🖐🏻, sojao 😴\",\n    \"Traffic mein phas gaye? Chat karke time pass karo! 🚗📲\",\n    \"Life update😊: pagal ho chuka hun💀\",\n    \"Dhek dhek dhek 🕵️‍♂️ kaise khush hora 😃\",\n    \"Karu guddi laal? 😤\",\n    \"Beimaan hain bada mausam, lekin baatchit nahi🥵\",\n    \"Bhai meme banane se pet nahi bharta! 🎬🍔\",\n    \"Kya purav jha ai hain ?? 🤔\",\n    \"Asambhavvvv!!🫨😲🤯 Naye message aaya hai! 📩🎉\",\n\n];\n","import { Message } from \"firebase-admin/messaging\";\nimport { messaging } from \"../config/firebase.config.js\";\nimport { notificationTitles } from \"../constants/notification-title.contant.js\";\n\n\nexport const calculateSkip  = (page:number,limit:number)=>{\n    return Math.ceil((page - 1) * limit)\n}\n\nexport const getRandomIndex=(length: number): number =>{\n    return Math.floor(Math.random() * length);\n}\n\nexport const sendPushNotification = ({fcmToken,body,title}:{fcmToken:string,body:string,title?:string})=>{\n    try {\n        console.log('push notification called for fcmToken',fcmToken);\n        const link = '/';\n        const payload: Message = {\n            token:fcmToken,\n            notification: {\n              title:title?title:`${notificationTitles[getRandomIndex(notificationTitles.length)]}`,\n              body,\n              imageUrl:\"https://res.cloudinary.com/djr9vabwz/image/upload/v1739560136/logo192_lqsucz.png\"\n            },\n            webpush: link && {\n              fcmOptions: {\n                link,\n              },\n            },\n          };\n        messaging.send(payload)\n    } \n    catch (error) {\n        console.log('error while sending push notification',error);\n    }\n}\n\nexport const convertBufferToBase64 = (buffer: Uint8Array<ArrayBuffer>): string => {\n  return Buffer.from(buffer).toString(\"base64\");\n};\n\nexport const bufferToBase64 = (buffer: Buffer): string => {\n  return buffer.toString(\"base64\");\n};\n\n\n\n\n","import { Server } from \"socket.io\";\nimport { Events } from \"../enums/event/event.enum.js\";\nimport { userSocketIds } from \"../index.js\";\n\nexport const emitEvent = ({data,event,io,users}:{io:Server,event:Events,users:Array<string>,data:unknown})=>{\n    const sockets = getMemberSockets(users) as string[];\n    if(sockets){\n        io.to(sockets).emit(event,data)\n    }\n}\n\nexport const emitEventToRoom = ({data,event,io,room}:{io:Server,event:Events,room:string,data:unknown})=>{\n    io.to(room).emit(event,data)\n}\n\nexport const getOtherMembers=({members,user}:{members:Array<string>,user:string})=>{\n    return members.filter(member=>member!==user)\n}\n\nexport const getMemberSockets = (members:string[])=>{\n    return members.map(member=>userSocketIds.get(member))\n}","import { NextFunction, Response } from \"express\";\nimport { Server } from \"socket.io\";\nimport { ACCEPTED_FILE_MIME_TYPES } from \"../constants/file.constant.js\";\nimport { Events } from \"../enums/event/event.enum.js\";\nimport { AuthenticatedRequest } from \"../interfaces/auth/auth.interface.js\";\nimport { prisma } from \"../lib/prisma.lib.js\";\nimport { uploadAttachmentSchemaType } from \"../schemas/message.schema.js\";\nimport { uploadFilesToCloudinary } from \"../utils/auth.util.js\";\nimport { CustomError, asyncErrorHandler } from \"../utils/error.utils.js\";\nimport { calculateSkip } from \"../utils/generic.js\";\nimport { emitEventToRoom } from \"../utils/socket.util.js\";\n\nexport const uploadAttachment = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    if(!req.files?.length){\n        return next(new CustomError(\"Please provide the files\",400))\n    }\n\n    const {chatId}:uploadAttachmentSchemaType = req.body\n\n    if(!chatId){\n        return next(new CustomError(\"ChatId is required\",400))\n    }\n\n    const isExistingChat = await prisma.chat.findUnique({\n        where:{\n            id:chatId\n        },\n        include:{\n            ChatMembers:{\n                select:{\n                  userId:true,\n                }\n            }\n        }\n    })\n\n    if(!isExistingChat){\n        return next(new CustomError(\"Chat not found\",404))\n    }\n\n    const attachments = req.files as Express.Multer.File[]\n\n    const invalidFiles = attachments.filter(file=>!ACCEPTED_FILE_MIME_TYPES.includes(file.mimetype))\n    \n    if(invalidFiles.length) {\n        const invalidFileNames = invalidFiles.map(file => file.originalname).join(', ');\n        return next(new CustomError(`Unsupported file types: ${invalidFileNames}, please provide valid files`, 400));\n    }\n\n    const uploadResults =  await uploadFilesToCloudinary({files:attachments})\n\n    console.log(\"Cloudinary Upload Results:\", uploadResults);\n\n\n    if(!uploadResults){\n        return next(new CustomError(\"Failed to upload files\",500))\n    }\n\n    const attachmentsArray = uploadResults.map(({secure_url,public_id})=>({cloudinaryPublicId:public_id,secureUrl:secure_url}))\n\n    const newMessage = await prisma.message.create({\n        data:{\n            chatId:chatId,\n            senderId:req.user.id,\n            attachments:{\n              createMany:{\n                data:attachmentsArray.map(attachment=>({cloudinaryPublicId:attachment.cloudinaryPublicId,secureUrl:attachment.secureUrl}))\n              }\n            }\n        },\n        include:{\n          sender:{\n            select:{\n              id:true,\n              username:true,\n              avatar:true,\n            }\n          },\n          attachments:{\n            select:{\n              secureUrl:true,\n            }\n          },\n          poll:{\n            omit:{\n              id:true,\n            }\n          },\n          reactions:{\n            select:{\n              user:{\n                select:{\n                  id:true,\n                  username:true,\n                  avatar:true\n                }\n              },\n              reaction:true,\n            }\n          },\n        },\n        omit:{\n          senderId:true,\n          pollId:true,\n          audioPublicId:true\n        },\n    })\n\n\n    const io:Server = req.app.get(\"io\");\n    emitEventToRoom({data:newMessage,event:Events.MESSAGE,io,room:chatId})\n    const otherMembersOfChat = isExistingChat.ChatMembers.filter(({userId}) => req.user.id !== userId);\n\n    const updateOrCreateUnreadMessagePromises = otherMembersOfChat.map(({ userId }) => {\n        return prisma.unreadMessages.upsert({\n          where: {\n            userId_chatId: { userId,chatId: chatId }, // Using the unique composite key\n          },\n          update: {\n            count: { increment: 1 },\n            senderId: req.user.id,\n          },\n          create: {\n            userId: userId,\n            chatId,\n            count: 1,\n            senderId: req.user.id,\n            messageId: newMessage.id,\n          },\n        });\n    });\n      \n    await Promise.all(updateOrCreateUnreadMessagePromises);\n\n    const unreadMessageData = \n    {\n        chatId,\n        message:{\n            attachments:newMessage.attachments.length ? true : false,\n            createdAt:newMessage.createdAt\n        },\n        sender:{\n            id:newMessage.sender.id,\n            avatar:newMessage.sender.avatar,\n            username:newMessage.sender.avatar\n        }\n    }\n\n    emitEventToRoom({data:unreadMessageData,event:Events.UNREAD_MESSAGE,io,room:chatId})\n    return res.status(201).json({});\n\n})\n\nexport const fetchAttachments = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const {id} = req.params\n    const { page = 1, limit = 6 } = req.query;\n\n    const attachments = await prisma.attachment.findMany({\n      where:{\n        message:{\n          chatId:id,\n        }\n      },\n      omit:{\n        id:true,\n        cloudinaryPublicId:true,\n        messageId:true,\n      },\n      orderBy:{\n        message:{\n          createdAt:\"desc\"\n        }\n      },\n      skip:calculateSkip(Number(page),Number(limit)),\n      take:Number(limit)\n    })\n\n    const totalAttachmentsCount = await prisma.attachment.count({where:{message:{chatId:id}}})\n    const totalPages =  Math.ceil(totalAttachmentsCount/Number(limit))\n\n    const payload = {\n      attachments,\n      totalAttachmentsCount,\n      totalPages,\n    }\n    \n    res.status(200).json(payload);\n})","import multer from 'multer'\nimport { MAX_FILE_SIZE } from '../constants/file.constant.js'\nimport type { AuthenticatedRequest } from '../interfaces/auth/auth.interface.js'\nimport {v4 as uuidV4 } from 'uuid'\n\nexport const upload = multer({\n    limits:{fileSize:MAX_FILE_SIZE},\n\n    storage:multer.diskStorage({\n        filename:(req:AuthenticatedRequest,file,cb)=>{\n            const userId=req.user.id\n            const uniqueMiddleName = uuidV4()\n            const newFileName = `${userId}-${uniqueMiddleName}-${file.originalname}`\n            cb(null,newFileName)\n        }\n        \n    })\n})\n\n","import { NextFunction, Response } from \"express\"\nimport jwt from 'jsonwebtoken'\nimport type { AuthenticatedRequest } from \"../interfaces/auth/auth.interface.js\"\nimport { prisma } from \"../lib/prisma.lib.js\"\nimport { CustomError, asyncErrorHandler } from \"../utils/error.utils.js\"\n\n\ntype SessionPayload = {\n    userId: string;\n    expiresAt: Date;\n};\n\n  \nexport const verifyToken=asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n        let {token} = req.cookies\n\n        const secretKey =\"helloWorld@123\";\n\n        if (!token && req.headers.authorization) {\n            const authHeader = req.headers.authorization;\n            if (authHeader.startsWith(\"Bearer \")) {\n              token = authHeader.split(\" \")[1]; // Extract token from \"Bearer <token>\"\n            }\n          }\n        \n        if (!token) {\n            return next(new CustomError(\"Token missing, please login again\", 401));\n        }\n\n        const decodedInfo=jwt.verify(token,secretKey,{algorithms:['HS256']}) as SessionPayload\n\n        if(!decodedInfo || !decodedInfo.userId){\n            return next(new CustomError(\"Invalid token please login again\",401))\n        }\n\n        const user = await prisma.user.findUnique({\n            where:{\n                id:decodedInfo.userId\n            },\n            select:{\n                id:true,\n                name:true,\n                username:true,\n                avatar:true,\n                email:true,\n                createdAt:true,\n                updatedAt:true,\n                emailVerified:true,\n                publicKey:true,\n                notificationsEnabled:true,\n                verificationBadge:true,\n                fcmToken:true,\n                oAuthSignup:true,\n            }\n        })\n\n        if(!user){\n            return next(new CustomError('Invalid Token, please login again',401))\n        }\n        req.user=user\n        next()\n})","import { Router } from \"express\";\nimport passport from 'passport';\nimport { config } from \"../config/env.config.js\";\nimport { checkAuth, getUserInfo, redirectHandler, updateFcmToken } from \"../controllers/auth.controller.js\";\nimport { validate } from \"../middlewares/validate.middleware.js\";\nimport { verifyToken } from \"../middlewares/verify-token.middleware.js\";\nimport { fcmTokenSchema } from \"../schemas/auth.schema.js\";\n\nexport default Router()\n\n.get(\"/user\",verifyToken,getUserInfo)\n.get(\"/verify-token\",verifyToken,checkAuth)\n.patch(\"/user/update-fcm-token\",verifyToken,validate(fcmTokenSchema),updateFcmToken)\n.get(\"/google\",passport.authenticate(\"google\",{session:false,scope:[\"email\",\"profile\"]}))\n.get(\"/google/callback\",passport.authenticate(\"google\",{session:false,failureRedirect:`${config.clientUrl}/auth/login`}),redirectHandler)","import { NextFunction, Request, Response } from \"express\";\nimport jwt from 'jsonwebtoken';\nimport { config } from \"../config/env.config.js\";\nimport type { AuthenticatedRequest, OAuthAuthenticatedRequest } from \"../interfaces/auth/auth.interface.js\";\nimport { prisma } from '../lib/prisma.lib.js';\nimport type { fcmTokenSchemaType } from \"../schemas/auth.schema.js\";\nimport { env } from \"../schemas/env.schema.js\";\nimport { CustomError, asyncErrorHandler } from \"../utils/error.utils.js\";\n\n\nconst getUserInfo = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n    const user = req.user\n    const secureUserInfo = {\n        id:user.id,\n        name:user.name,\n        username:user.username,\n        avatar:user.avatar,\n        email:user.email,\n        createdAt:user.createdAt,\n        updatedAt:user.updatedAt,\n        emailVerified:user.emailVerified,\n        publicKey:user.publicKey,\n        notificationsEnabled:user.notificationsEnabled,\n        verificationBadge:user.verificationBadge,\n        fcmToken:user.fcmToken,\n        oAuthSignup:user.oAuthSignup\n    }\n    return res.status(200).json(secureUserInfo)\n})\n\nconst updateFcmToken = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const {fcmToken}:fcmTokenSchemaType = req.body\n\n    const user =  await prisma.user.update({\n        where:{\n            id:req.user.id\n        },\n        data:{\n            fcmToken\n        }\n    })\n    return res.status(200).json({fcmToken:user.fcmToken})\n})\n\nconst checkAuth = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n    if(req.user){\n        const secureUserInfo = {\n            id:req.user.id,\n            name:req.user.name,\n            username:req.user.username,\n            avatar:req.user.avatar,\n            email:req.user.email,\n            createdAt:req.user.createdAt,\n            updatedAt:req.user.updatedAt,\n            emailVerified:req.user.emailVerified,\n            publicKey:req.user.publicKey,\n            notificationsEnabled:req.user.notificationsEnabled,\n            verificationBadge:req.user.verificationBadge,\n            fcmToken:req.user.fcmToken,\n            oAuthSignup:req.user.oAuthSignup\n        }\n        return res.status(200).json(secureUserInfo)\n    }\n    return next(new CustomError(\"Token missing, please login again\",401))\n})\n\nconst redirectHandler = asyncErrorHandler(async(req:OAuthAuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    try {\n        if(req.user){\n            const tempToken =  jwt.sign({user:req.user.id,oAuthNewUser:req.user.newUser},env.JWT_SECRET,{expiresIn:\"5m\"})\n            return res.redirect(307,`${config.clientUrl}/auth/oauth-redirect?token=${tempToken}`)\n        }\n        else{\n            return res.redirect(`${config.clientUrl}/auth/login`)\n        }\n    } catch (error) {\n        console.log('error duing oauth redirect handler');\n        return res.redirect(`${config.clientUrl}/auth/login`)\n    }\n})\n\nexport {\n    checkAuth, getUserInfo,\n    redirectHandler,\n    updateFcmToken\n};\n\n","import { ZodObject } from \"zod\";\nimport {Request,Response,NextFunction} from 'express'\n\nexport const validate = (schema:ZodObject<any>) => (req:Request,res:Response,next:NextFunction)=>{\n\n    try {\n        req.body=schema.parse(req.body)\n        next()\n    } catch (error) {\n        next(error)\n    }\n\n}","import { z } from \"zod\";\n\nconst passwordValidation = z.string({required_error:\"Password is required\"}).min(8,'Password cannot be shorter than 8 characters').max(40,'Password cannot be longer than 30 characters')\n.regex(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm,'Password must contain 8 characters, 1 uppercase letter, 1 lowercase letter and 1 number')\n\n\nexport const fcmTokenSchema = z.object({\n    fcmToken:z.string({required_error:\"fcm token is required\"})\n})\n\nexport type fcmTokenSchemaType = z.infer<typeof fcmTokenSchema>\n","import { Router } from \"express\";\nimport { validate } from \"../middlewares/validate.middleware.js\";\nimport { createChatSchema, addMemberToChatSchema, removeMemberfromChat, updateChatSchema } from \"../schemas/chat.schema.js\";\nimport { addMemberToChat, createChat, getUserChats, removeMemberFromChat, updateChat } from \"../controllers/chat.controller.js\";\nimport { verifyToken } from \"../middlewares/verify-token.middleware.js\";\nimport { upload } from \"../middlewares/multer.middleware.js\";\nimport { fileValidation } from \"../middlewares/file-validation.middleware.js\";\n\n\nexport default Router()\n\n.post(\"/\",verifyToken,upload.single(\"avatar\"),fileValidation,validate(createChatSchema),createChat)\n.get(\"/\",verifyToken,getUserChats)\n.patch(\"/:id/members\",verifyToken,validate(addMemberToChatSchema),addMemberToChat)\n.patch(\"/:id\",verifyToken,upload.single('avatar'),fileValidation,validate(updateChatSchema),updateChat)\n.delete(\"/:id/members\",verifyToken,validate(removeMemberfromChat),removeMemberFromChat)","import { z } from \"zod\";\n\n\nexport const createChatSchema = z.object({\n    name:z.string().optional(), \n    isGroupChat:z.enum([\"true\",\"false\"]),\n    members:z.string({required_error:\"members are required\"}).array().min(1,'Atleast 1 member is required to create a chat').max(30,'Chat members cannot be more than 30'),\n    avatar:z.string().optional(),\n})\n\n\nexport const addMemberToChatSchema = z.object({\n    members:z.string({required_error:\"Atleast one member is required to add to chat\"}).array()\n})\n\nexport const removeMemberfromChat = z.object({\n    members:z.string({required_error:\"Atleast one member is required to remove from chat\"}).array()\n})\n\nexport const updateChatSchema = z.object({\n    name:z.string({required_error:\"chat name is required\"}).optional()\n})\n\n\nexport type createChatSchemaType = z.infer<typeof createChatSchema>\nexport type addMemberToChatType = z.infer<typeof addMemberToChatSchema>\nexport type removeMemberfromChatType = z.infer<typeof removeMemberfromChat>\nexport type updateChatSchemaType = z.infer<typeof updateChatSchema>","import { Server } from \"socket.io\";\nimport { userSocketIds } from \"../index.js\";\n\n\n// export const deleteChat = async(isExistingChat: Document<unknown, {}, IChat> & IChat & Required<{_id: Types.ObjectId}>)=>{\n\n//         const publicIdsToBeDestroyed:Array<string> = []\n\n//         if(isExistingChat.avatar?.publicId){\n//           publicIdsToBeDestroyed.push(isExistingChat.avatar.publicId)\n//         }\n\n//         const messageWithAttachements = await Message.find({chat:isExistingChat._id,attachments:{$ne:[]}})\n        \n//         messageWithAttachements.forEach(message=>{\n\n//          if(message.attachments?.length){\n//            const attachmentsPublicId = message.attachments.map(attachment=>attachment.publicId)\n//            publicIdsToBeDestroyed.push(...attachmentsPublicId)\n//          }\n\n//         })\n\n//         const chatDeletePromise:Array<Promise<any>> = [\n//           isExistingChat.deleteOne(),\n//           Message.deleteMany({chat:isExistingChat._id}),\n//           UnreadMessage.deleteMany({chat:isExistingChat._id}),\n//           deleteFilesFromCloudinary({publicIds:publicIdsToBeDestroyed})\n//         ]\n\n//         await Promise.all(chatDeletePromise)\n// }\n\nexport const joinMembersInChatRoom = ({memberIds,roomToJoin,io}:{memberIds:string[],roomToJoin:string,io:Server})=>{\n\n    for(const memberId of memberIds){\n      const memberSocketId = userSocketIds.get(memberId);\n      if(memberSocketId){\n        const memberSocket = io.sockets.sockets.get(memberSocketId);\n        if(memberSocket){\n          memberSocket.join(roomToJoin);\n        }\n      }\n    }\n}\n\nexport const disconnectMembersFromChatRoom = ({memberIds,roomToLeave,io}:{memberIds:string[],roomToLeave:string,io:Server})=>{\n\n    for(const memberId of memberIds){\n      const memberSocketId = userSocketIds.get(memberId);\n      if(memberSocketId){\n        const memberSocket = io.sockets.sockets.get(memberSocketId);\n        if(memberSocket){\n          memberSocket.leave(roomToLeave);\n        }\n      }\n    }\n}","import { UploadApiResponse } from \"cloudinary\";\nimport { NextFunction, Response } from \"express\";\nimport { Server } from \"socket.io\";\nimport { DEFAULT_AVATAR } from \"../constants/file.constant.js\";\nimport { Events } from \"../enums/event/event.enum.js\";\nimport type { AuthenticatedRequest } from \"../interfaces/auth/auth.interface.js\";\nimport { prisma } from \"../lib/prisma.lib.js\";\nimport type { addMemberToChatType, createChatSchemaType, removeMemberfromChatType, updateChatSchemaType } from \"../schemas/chat.schema.js\";\nimport { deleteFilesFromCloudinary, uploadFilesToCloudinary } from \"../utils/auth.util.js\";\nimport { disconnectMembersFromChatRoom, joinMembersInChatRoom } from \"../utils/chat.util.js\";\nimport { CustomError, asyncErrorHandler } from \"../utils/error.utils.js\";\nimport { emitEvent, emitEventToRoom } from \"../utils/socket.util.js\";\n\n\ntype GroupChatUpdateEventSendPayload = {\n  chatId: string;\n  chatAvatar?: string;\n  chatName?: string;\n}\n\ntype NewMemberAddedEventSendPayload = {\n  chatId: string;\n  members: {\n    id: string;\n    username: string;\n    avatar: string;\n    isOnline: boolean;\n    publicKey: string | null;\n    lastSeen: Date | null;\n    verificationBadge: boolean;\n  }[]\n}\n\ntype MemberRemovedEventSendPayload = {\n  chatId: string;\n  membersId: string[];\n}\n\ntype DeleteChatEventSendPayload = {\n  chatId: string;\n}\n\nconst createChat = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    let uploadResults:UploadApiResponse[] | void = []\n\n    const {isGroupChat,members,name}:createChatSchemaType = req.body\n\n    if(isGroupChat==='true'){\n\n        if(members.length<2){\n            return next(new CustomError(\"Atleast 2 members are required to create group chat\",400))\n        }\n        else if(!name){\n            return next(new CustomError(\"name is required for creating group chat\",400))\n        }\n\n        const memberIds=[...members,req.user.id]\n\n        let hasAvatar = false;\n        if(req.file){\n            hasAvatar = true;\n            uploadResults = await uploadFilesToCloudinary({files:[req.file]})\n        }\n\n        const avatar = (hasAvatar && uploadResults && uploadResults[0]) ? uploadResults[0].secure_url : DEFAULT_AVATAR;\n        const avatarCloudinaryPublicId = (hasAvatar && uploadResults && uploadResults[0]) ? uploadResults[0].public_id : null;\n        \n        const newChat =  await prisma.chat.create({\n          data:{\n            avatar,                    \n            avatarCloudinaryPublicId,\n            isGroupChat:true,\n            adminId:req.user.id,\n            name,\n          },\n          select:{\n            id:true,\n          }\n        })\n\n        await prisma.chatMembers.createMany({\n          data: memberIds.map(id=>({\n            chatId:newChat.id,\n            userId:id\n          }))\n        })\n\n        const populatedChat = await prisma.chat.findUnique({\n          where:{id:newChat.id},\n          omit:{\n            avatarCloudinaryPublicId:true,\n          },\n          include:{\n            ChatMembers:{\n              include:{\n                user:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                    isOnline:true,\n                    publicKey: true,\n                    lastSeen:true,\n                    verificationBadge:true,\n                  }\n                },\n              },\n              omit:{\n                chatId:true,\n                userId:true,\n                id:true,\n              }\n            },\n            UnreadMessages:{\n              where:{\n                userId:req.user.id\n              },\n              select:{\n                count:true,\n                message:{\n                  select:{\n                    isTextMessage:true,\n                    url:true,\n                    attachments:{\n                      select:{\n                        secureUrl:true,\n                      }\n                    },\n                    isPollMessage:true,\n                    createdAt:true,\n                    textMessageContent:true,\n                  }\n                },\n                sender:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                    isOnline:true,\n                    publicKey:true,\n                    lastSeen:true,\n                    verificationBadge:true\n                  }\n                },\n              }\n            },\n            latestMessage:{\n              include:{\n                sender:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                  }\n                },\n                attachments:{\n                  select:{\n                    secureUrl:true\n                  }\n                },\n                poll:true,\n                reactions:{\n                  include:{\n                    user:{\n                      select:{\n                        id:true,\n                        username:true,\n                        avatar:true\n                      }\n                    },\n                  },\n                  omit:{\n                    id: true,\n                    createdAt: true,\n                    updatedAt: true,\n                    userId: true,\n                    messageId: true\n                  }\n                },\n              }\n            }\n          },\n        })\n        \n        const io:Server = req.app.get(\"io\");\n        joinMembersInChatRoom({memberIds,roomToJoin:newChat.id,io})\n        emitEventToRoom({event:Events.NEW_CHAT,io,room:newChat.id,data:{...populatedChat,typingUsers:[]}});\n        return res.status(201);\n    }\n})\n\nconst getUserChats = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n      const chats = await prisma.chat.findMany({\n          where:{\n            ChatMembers:{\n              some:{\n                userId:req.user.id\n              }\n            }\n          },\n          omit:{\n            avatarCloudinaryPublicId:true,\n          },\n          include:{\n            ChatMembers:{\n              include:{\n                user:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                    isOnline:true,\n                    publicKey: true,\n                    lastSeen:true,\n                    verificationBadge:true,\n                  }\n                },\n              },\n              omit:{\n                chatId:true,\n                userId:true,\n                id:true,\n              }\n            },\n            UnreadMessages:{\n              select:{\n                count:true,\n                message:{\n                  select:{\n                    isTextMessage:true,\n                    url:true,\n                    attachments:{\n                      select:{\n                        secureUrl:true,\n                      }\n                    },\n                    isPollMessage:true,\n                    createdAt:true,\n                    textMessageContent:true,\n                  }\n                },\n                sender:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                    isOnline:true,\n                    publicKey:true,\n                    lastSeen:true,\n                    verificationBadge:true\n                  }\n                },\n              }\n            },\n            latestMessage:{\n              include:{\n                sender:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                  }\n                },\n                attachments:{\n                  select:{\n                    secureUrl:true\n                  }\n                },\n                poll:true,\n                reactions:{\n                  include:{\n                    user:{\n                      select:{\n                        id:true,\n                        username:true,\n                        avatar:true\n                      }\n                    },\n                  },\n                  omit:{\n                    id: true,\n                    createdAt: true,\n                    updatedAt: true,\n                    userId: true,\n                    messageId: true\n                  }\n                },\n              }\n            }\n          },\n      })\n  \n      const chatsWithUserTyping = chats.map(chat => ({\n        ...chat,\n        typingUsers: []\n      }));\n  \n    return res.status(200).json(chatsWithUserTyping)\n\n})\n\nconst addMemberToChat = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const {id}=req.params\n    const {members}:addMemberToChatType = req.body\n\n    const chat =  await prisma.chat.findUnique({where:{id}})\n    \n    if(!chat){\n        return next(new CustomError(\"Chat does not exists\",404))\n    }\n    if(!chat.isGroupChat){\n        return next(new CustomError(\"This is not a group chat, you cannot add members\",400))\n    }\n    const isAdminAddingMember = chat.adminId === req.user.id;\n    if(!isAdminAddingMember){\n        return next(new CustomError(\"You are not allowed to add members as you are not the admin of this chat\",400))\n    }\n\n    const areMembersToBeAddedAlreadyExists = await prisma.chatMembers.findMany({\n      where: {\n        chatId: id,\n        userId: {\n          in: members,\n        },\n      },\n      include:{\n        user:{\n          select:{\n            username:true\n          }\n        }\n      }\n    });\n\n    if(areMembersToBeAddedAlreadyExists.length){\n      return next(new CustomError(`${areMembersToBeAddedAlreadyExists.map(({user:{username}})=>`${username}`)} already exists in members of this chat`,400))\n    }\n\n    const oldExistingMembers = await prisma.chatMembers.findMany({\n      where: {\n        chatId: id,\n      },\n      include:{\n        user:{\n          select:{\n            id:true,\n          }\n        }\n      }\n    });\n\n    const oldExistingMembersIds = oldExistingMembers.map(({user:{id}})=>id)\n\n    await prisma.chatMembers.createMany({\n      data: members.map(memberid=>({\n        chatId:id,\n        userId:memberid\n      }))\n    })\n\n    const newMemberDetails = await prisma.user.findMany({\n      where:{\n        id:{\n          in:members\n        }\n      },\n      select:{\n        id:true,\n        username:true,\n        avatar:true,\n        isOnline:true,\n        publicKey:true,\n        lastSeen:true,\n        verificationBadge:true\n      }\n    })\n\n    const updatedChat = await prisma.chat.findUnique({\n      where:{\n        id:chat.id\n      },\n      omit:{\n        avatarCloudinaryPublicId:true,\n      },\n      include:{\n        ChatMembers:{\n          include:{\n            user:{\n              select:{\n                id:true,\n                username:true,\n                avatar:true,\n                isOnline:true,\n                publicKey: true,\n                lastSeen:true,\n                verificationBadge:true,\n              }\n            },\n          },\n          omit:{\n            chatId:true,\n            userId:true,\n            id:true,\n          }\n        },\n        latestMessage:{\n          include:{\n            sender:{\n              select:{\n                id:true,\n                username:true,\n                avatar:true,\n              }\n            },\n            attachments:{\n              select:{\n                secureUrl:true\n              }\n            },\n            poll:true,\n            reactions:{\n              include:{\n                user:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true\n                  }\n                },\n              },\n              omit:{\n                id: true,\n                createdAt: true,\n                updatedAt: true,\n                userId: true,\n                messageId: true\n              }\n            },\n          }\n        }\n      },\n    })\n\n    const io:Server = req.app.get(\"io\");\n\n    // join the new members in the chat room\n    joinMembersInChatRoom({io,roomToJoin:chat.id,memberIds:members})\n\n    // emitting the new chat event to the new members\n    emitEvent({event:Events.NEW_CHAT,data:{...updatedChat,typingUsers:[],UnreadMessages:[]},io,users:members})\n\n    // emitting the new member added event to the existing members\n    // with new member details\n    const payload:NewMemberAddedEventSendPayload = {\n      chatId:chat.id,\n      members:newMemberDetails\n    }\n    emitEvent({data:payload,event:Events.NEW_MEMBER_ADDED,io,users:oldExistingMembersIds});\n    return res.status(200);\n})\n\nconst removeMemberFromChat = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const {id}=req.params\n    const {members}:removeMemberfromChatType = req.body\n\n    const chat =  await prisma.chat.findUnique({where:{id}})\n    \n    if(!chat){\n        return next(new CustomError(\"Chat does not exists\",404))\n    }\n\n    if(!chat.isGroupChat){\n        return next(new CustomError(\"This is not a group chat, you cannot remove members\",400))\n    }\n\n    const isAdminRemovingMembers = req.user.id === chat.adminId;\n    if(!isAdminRemovingMembers){\n        return next(new CustomError(\"You are not allowed to remove members as you are not the admin of this chat\",400))\n    }\n\n    const existingMembers =  await prisma.chatMembers.findMany({\n      where:{\n        chatId:id\n      }\n    })\n    \n    if(existingMembers.length===3){\n      return next(new CustomError(\"Minimum 3 members are required in a group chat\",400))\n    }\n\n    const existingMemberIds = existingMembers.map(({userId})=>userId);\n\n    const doesMembersToBeRemovedDosentExistsAlready = members.filter(memberId=>!existingMemberIds.includes(memberId));\n\n    if(doesMembersToBeRemovedDosentExistsAlready.length){\n      return next(new CustomError(\"Provided members to be removed dosen't exists in chat\",404))\n    }\n\n    let adminLeavingId : string | null = null;\n\n    for(const member of members){\n      if(member===chat.adminId){\n        adminLeavingId = member;\n        break;\n      }\n    }\n\n    \n    if(adminLeavingId){\n        let nextAdminId:string | null = null;\n        // if admin is leaving the chat\n        // then assign the admin role to the next member\n        for(const memberId of existingMemberIds){\n          if(memberId!==adminLeavingId && !members.includes(memberId)){\n            nextAdminId = memberId;\n            break;\n          }\n        }\n\n        if(nextAdminId){\n          await prisma.chat.update({\n            where:{id},\n            data:{adminId:nextAdminId}\n          })\n        }\n    }\n\n    await prisma.chatMembers.deleteMany({\n      where:{\n        chatId:id,\n        userId:{in:members}\n      }\n    })\n\n    const io:Server = req.app.get(\"io\");\n\n    disconnectMembersFromChatRoom({io,memberIds:members,roomToLeave:id})\n\n    const deletedChatPayload:DeleteChatEventSendPayload = {\n      chatId:id\n    }\n\n    emitEvent({io,event:Events.DELETE_CHAT,users:members,data:deletedChatPayload})\n\n    const remainingMembers = existingMemberIds.filter(id=>!members.includes(id))\n\n    const payload:MemberRemovedEventSendPayload = {\n      chatId:id,\n      membersId:members\n    }\n    emitEvent({io,event:Events.MEMBER_REMOVED,data:payload,users:remainingMembers})\n\n    return res.status(200);\n})\n\nconst updateChat = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const { id } = req.params\n    const { name }:updateChatSchemaType = req.body;\n    const avatar = req.file\n\n    if(!name && !avatar){\n      return next(new CustomError(\"Either avatar or name is required for updating a chat, please provide one\"))\n    }\n\n    const chat = await prisma.chat.findUnique({\n      where:{id}\n    })\n\n    if (!chat) {\n        return next(new CustomError(\"chat not found\",404))\n    }\n\n    if(!chat.isGroupChat){\n      return next(new CustomError(\"You cannot update a private chat\",400))\n    }\n\n    if(avatar){\n            \n      if(chat.avatarCloudinaryPublicId){\n        // removing old group chat avatar from cloudinary (to free up cloud space)\n        await deleteFilesFromCloudinary({publicIds:[chat.avatarCloudinaryPublicId]})\n      }\n      // now uploading the new group chat avatar to cloudinary\n      const uploadResult = await uploadFilesToCloudinary({files:[avatar]})\n\n      if(!uploadResult){\n        return next(new CustomError(\"Error updating chat avatar\",404))    \n      }\n\n      await prisma.chat.update({\n        where:{id},\n        data:{\n          avatarCloudinaryPublicId:uploadResult[0].public_id,\n          avatar:uploadResult[0].secure_url\n        }\n      })\n    }\n\n    if(name){\n      await prisma.chat.update({\n        where:{id},\n        data:{name}\n      })\n    }\n\n    const updatedChat = await prisma.chat.findUnique({\n      where:{id},\n      select:{name:true,avatar:true,id:true}\n    })\n\n    if(!updatedChat){\n      return next(new CustomError(\"Error updating chat\",404))\n    }\n\n    \n    const payload:GroupChatUpdateEventSendPayload = {\n      chatId:updatedChat.id,\n      chatAvatar:updatedChat.avatar,\n      chatName:updatedChat.name!\n    }\n    \n    const io:Server = req.app.get(\"io\");\n    emitEventToRoom({io,event:Events.GROUP_CHAT_UPDATE,room:id,data:payload})\n\n    return res.status(200)\n})\n\nexport { addMemberToChat, createChat, getUserChats, removeMemberFromChat, updateChat };\n\n","import { NextFunction, Request, Response } from \"express\";\nimport { ACCEPTED_IMAGE_TYPES, MAX_FILE_SIZE } from \"../constants/file.constant.js\";\nimport { CustomError } from \"../utils/error.utils.js\";\n\nexport const fileValidation = (req:Request,res:Response,next:NextFunction)=>{\n\n    if(req.file){\n        \n        if(!ACCEPTED_IMAGE_TYPES.includes(req.file.mimetype)){\n            return next(new CustomError(`Only ${ACCEPTED_IMAGE_TYPES.join(\" \")} file types are supported and you are trying to upload a file with ${req.file.mimetype} type`,400))\n        }\n        \n        if(req.file.size > MAX_FILE_SIZE){\n            return next(new CustomError(`Avatar must not be larger than ${MAX_FILE_SIZE/1000000.}MB`,400))\n        }\n\n        return next()\n    }\n\n    return next()\n\n}","import { Router } from \"express\";\nimport { verifyToken } from \"../middlewares/verify-token.middleware.js\";\nimport { getMessages } from \"../controllers/message.controller.js\";\n\nexport default Router()\n\n.get(\"/:id\",verifyToken,getMessages)","import { NextFunction, Request, Response } from \"express\";\nimport { prisma } from \"../lib/prisma.lib.js\";\nimport { asyncErrorHandler } from \"../utils/error.utils.js\";\nimport { calculateSkip } from \"../utils/generic.js\";\n\nexport const getMessages = asyncErrorHandler(async(req:Request,res:Response,next:NextFunction)=>{\n\n    const {id} = req.params\n    const {page = 1, limit = 20} = req.query\n\n    const pageNumber = Number(page)\n    const limitNumber = Number(limit)\n\n    const messages = await prisma.message.findMany({\n      where:{\n        chatId:id\n      },\n      include:{\n        sender:{\n          select:{\n            id:true,\n            username:true,\n            avatar:true,\n          }\n        },\n        attachments:{\n          select:{\n            secureUrl:true,\n          }\n        },\n        poll:{\n          omit:{\n            id:true,\n          },\n          include:{\n            votes:{\n              include:{\n                user:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true\n                  }\n                }\n              },\n              omit:{\n                id:true,\n                pollId:true,\n                userId:true,\n              }\n            },\n          }\n        },\n        reactions:{\n          select:{\n            user:{\n              select:{\n                id:true,\n                username:true,\n                avatar:true\n              }\n            },\n            reaction:true,\n          }\n        },\n        replyToMessage:{\n          select:{\n            sender:{\n              select:{\n                id:true,\n                username:true,\n                avatar:true,\n              }\n            },\n            id:true,\n            textMessageContent:true,\n            isPollMessage:true,\n            url:true,\n            audioUrl:true,\n            attachments:{\n              select:{\n                secureUrl:true\n              }\n            }\n          }\n        }\n      },\n      omit:{\n        senderId:true,\n        pollId:true,\n      },\n      orderBy:{\n        createdAt:\"desc\"\n      },\n      skip:calculateSkip(pageNumber,limitNumber),\n      take:limitNumber\n    })\n\n    const totalMessagesCount = await prisma.message.count({\n      where:{\n        chatId:id\n      }\n    });\n\n\n    const totalPages = Math.ceil(totalMessagesCount / limitNumber);\n\n    const messagesWithTotalPage = {\n        messages:messages.reverse(),\n        totalPages,\n    }\n    return res.status(200).json(messagesWithTotalPage)\n\n})\n\n","import { Router } from \"express\";\nimport { verifyToken } from \"../middlewares/verify-token.middleware.js\";\nimport { createRequest, getUserRequests, handleRequest } from \"../controllers/request.controller.js\";\nimport { validate } from \"../middlewares/validate.middleware.js\";\nimport { createRequestSchema, handleRequestSchema } from \"../schemas/request.schema.js\";\n\nexport default Router()\n\n.get(\"/\",verifyToken,getUserRequests)\n.post(\"/\",verifyToken,validate(createRequestSchema),createRequest)\n.delete(\"/:id\",verifyToken,validate(handleRequestSchema),handleRequest)","import { NextFunction, Response } from \"express\";\nimport { Server } from \"socket.io\";\nimport { Events } from \"../enums/event/event.enum.js\";\nimport type { AuthenticatedRequest } from \"../interfaces/auth/auth.interface.js\";\nimport { prisma } from \"../lib/prisma.lib.js\";\nimport type { createRequestSchemaType, handleRequestSchemaType } from \"../schemas/request.schema.js\";\nimport { joinMembersInChatRoom } from \"../utils/chat.util.js\";\nimport { CustomError, asyncErrorHandler } from \"../utils/error.utils.js\";\nimport { sendPushNotification } from \"../utils/generic.js\";\nimport { emitEvent, emitEventToRoom } from \"../utils/socket.util.js\";\n\n\nexport const getUserRequests = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const friendRequests = await prisma.friendRequest.findMany({\n      where:{\n        receiverId:req.user.id\n      },\n      include:{\n        sender:{\n          select:{\n            id:true,\n            username:true,\n            avatar:true,\n            isOnline:true,\n            publicKey:true,\n            lastSeen:true,\n            verificationBadge:true\n          }\n        }\n      },\n      omit:{\n        receiverId:true,\n        updatedAt:true,\n      }\n    })\n    \n    return res.status(200).json(friendRequests)\n})\n\nexport const createRequest = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const {receiver}:createRequestSchemaType = req.body\n\n    const isValidReceiverId = await prisma.user.findUnique({where:{id:receiver}})\n\n    if(!isValidReceiverId){\n        return next(new CustomError(\"Receiver not found\",404))\n    }\n\n    if(req.user.id === receiver){\n        return next(new CustomError(\"You cannot send a request to yourself\",400))\n    }\n\n    const requestAlreadyExists = await prisma.friendRequest.findFirst({\n      where:{\n        AND:[\n          {\n            receiverId:receiver,\n          },\n          {\n            senderId:req.user.id\n          }\n        ]\n      }\n    })\n\n    if(requestAlreadyExists){\n        return next(new CustomError(\"Request is already sent, please wait for them to either accept or reject it\",400))\n    }\n\n\n    const doesRequestExistsFromReceiver = await prisma.friendRequest.findFirst({\n      where:{\n        AND:[\n          {\n            senderId:receiver,\n          },\n          {\n            receiverId:req.user.id\n          }\n        ]\n      } \n    })\n\n    if(doesRequestExistsFromReceiver){\n      return next(new CustomError(\"They have already sent you a friend request\",400))\n    }\n\n    const areAlreadyFriends = await prisma.friends.findFirst({\n      where:{\n        OR:[\n          {\n            user1Id:req.user.id,\n            user2Id:receiver\n          },\n          {\n            user1Id:receiver,\n            user2Id:req.user.id\n          }\n        ]\n      }\n    })\n\n    if(areAlreadyFriends){\n      return next(new CustomError(\"You are already friends\",400));\n    }\n\n    // const newRequest = await Request.create({receiver,sender:req.user?._id})\n    const newRequest = await prisma.friendRequest.create({\n      data:{\n        senderId:req.user.id,\n        receiverId:receiver\n      },\n      include:{\n        sender:{\n          select:{\n            id:true,\n            username:true,\n            avatar:true,\n            isOnline:true,\n            publicKey:true,\n            lastSeen:true,\n            verificationBadge:true\n          }\n        }\n      },\n      omit:{\n        receiverId:true,\n        updatedAt:true,\n        senderId:true,\n      }\n    })\n\n    if(isValidReceiverId.fcmToken && isValidReceiverId.notificationsEnabled){\n      console.log('push notification triggered for receiver');\n      sendPushNotification({fcmToken:isValidReceiverId.fcmToken,body:`${req.user.username} sent you a friend request 😃`})\n    }\n\n    const io:Server = req.app.get('io');\n    emitEvent({io,event:Events.NEW_FRIEND_REQUEST,data:newRequest,users:[receiver]})\n\n    return res.status(201).json({})\n})\n\nexport const handleRequest = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const {id}=req.params\n    const {action}:handleRequestSchemaType = req.body\n\n    const isExistingRequest = await prisma.friendRequest.findFirst({\n      where:{\n        id,\n      }\n    })\n\n    if(!isExistingRequest){\n        return next(new CustomError(\"Request not found\",404))\n    }\n\n    if(isExistingRequest.receiverId !== req.user.id){\n        return next(new CustomError(\"Only the receiver of this request can accept or reject it\",401))\n    }\n\n    if(action==='accept'){\n\n      const existingChat = await prisma.chat.findFirst({\n        where: {\n            isGroupChat: false,  // Ensure it's a private chat\n            ChatMembers: {\n                every: {  // Ensure both users are part of the chat\n                    userId: { in: [isExistingRequest.senderId, isExistingRequest.receiverId] }\n                }\n            }\n        }\n     });\n\n     if(existingChat){\n        return next(new CustomError(\"Your private chat already exists\",400));\n     }\n\n        const newChat = await prisma.chat.create({\n          data:{\n            ChatMembers:{\n              create:[\n                {user:{connect:{id:isExistingRequest.senderId}}},\n                {user:{connect:{id:isExistingRequest.receiverId}}}\n              ]\n            }\n          },\n          omit:{\n            avatarCloudinaryPublicId:true,\n          },\n          include:{\n            ChatMembers:{\n              include:{\n                user:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                    isOnline:true,\n                    publicKey: true,\n                    lastSeen:true,\n                    verificationBadge:true,\n                  }\n                },\n              },\n              omit:{\n                chatId:true,\n                userId:true,\n                id:true,\n              }\n            },\n            UnreadMessages:{\n              where:{\n                userId:req.user.id\n              },\n              select:{\n                count:true,\n                message:{\n                  select:{\n                    isTextMessage:true,\n                    url:true,\n                    attachments:{\n                      select:{\n                        secureUrl:true,\n                      }\n                    },\n                    isPollMessage:true,\n                    createdAt:true,\n                    textMessageContent:true,\n                  }\n                },\n                sender:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                    isOnline:true,\n                    publicKey:true,\n                    lastSeen:true,\n                    verificationBadge:true\n                  }\n                },\n              }\n            },\n            latestMessage:{\n              include:{\n                sender:{\n                  select:{\n                    id:true,\n                    username:true,\n                    avatar:true,\n                  }\n                },\n                attachments:{\n                  select:{\n                    secureUrl:true\n                  }\n                },\n                poll:true,\n                reactions:{\n                  include:{\n                    user:{\n                      select:{\n                        id:true,\n                        username:true,\n                        avatar:true\n                      }\n                    },\n                  },\n                  omit:{\n                    id: true,\n                    createdAt: true,\n                    updatedAt: true,\n                    userId: true,\n                    messageId: true\n                  }\n                },\n              }\n            }\n          },\n        })\n       \n        const newFriendEntry =  await prisma.friends.create({\n          data:{\n            user1:{\n              connect:{\n                id:isExistingRequest.senderId\n              }\n            },\n            user2:{\n              connect:{\n                id:isExistingRequest.receiverId\n              }\n            }\n          },\n          include:{\n            user1:true,\n            user2:true,\n          }\n        })\n\n        let sender = newFriendEntry.user1\n\n        if(sender.id!=isExistingRequest.senderId){\n          sender = newFriendEntry.user2\n        }\n\n        if(sender.notificationsEnabled && sender.fcmToken){\n          sendPushNotification({fcmToken:sender.fcmToken,body:`${req.user.username} has accepted your friend request 😃`})\n        }\n\n        const io:Server = req.app.get('io');\n        joinMembersInChatRoom({io,memberIds:[isExistingRequest.senderId,isExistingRequest.receiverId],roomToJoin:newChat.id});\n        \n        await prisma.friendRequest.delete({\n          where:{\n            id,\n          }\n        })\n        \n        emitEventToRoom({data:{...newChat,typingUsers:[]},event:Events.NEW_CHAT,io,room:newChat.id})\n        return res.status(200).json({id:isExistingRequest.id})\n    }\n\n    else if(action==='reject'){\n\n        const deletedRequest = await prisma.friendRequest.delete({\n          where:{\n            id,\n          },\n          include:{\n            sender:{\n              select:{\n                isOnline:true,\n                fcmToken:true,\n                notificationsEnabled:true,\n              }\n            }\n          }\n        })\n\n        const sender = deletedRequest.sender\n\n        if(sender.fcmToken && sender.notificationsEnabled){\n          sendPushNotification({fcmToken:sender.fcmToken,body:`${req.user.username} has rejected your friend request ☹️`})\n        }\n        return res.status(200).json({id:deletedRequest.id})\n    }\n    \n})\n\n","import { z } from \"zod\";\n\nexport const createRequestSchema = z.object({\n    receiver:z.string({required_error:\"Receiver is required to send a request\"})\n})\n\nexport const handleRequestSchema = z.object({\n    action:z.enum(['accept','reject'],{required_error:\"action is required\"})\n})\n\n\nexport type createRequestSchemaType = z.infer<typeof createRequestSchema>\nexport type handleRequestSchemaType = z.infer<typeof handleRequestSchema>","import { Router } from \"express\";\nimport { testEmailHandler, udpateUser } from \"../controllers/user.controller.js\";\nimport { fileValidation } from \"../middlewares/file-validation.middleware.js\";\nimport { upload } from \"../middlewares/multer.middleware.js\";\nimport { verifyToken } from \"../middlewares/verify-token.middleware.js\";\n\nexport default Router()\n\n.patch(\"/\",verifyToken,upload.single(\"avatar\"),fileValidation,udpateUser)\n.get(\"/test-email\",verifyToken,testEmailHandler)","import nodemailer from 'nodemailer'\nimport { env } from '../schemas/env.schema.js'\n\nlet transporter : nodemailer.Transporter\n\ntry {\n    transporter = nodemailer.createTransport({\n        service:\"gmail\",\n        auth:{\n            user:env.EMAIL,\n            pass:env.PASSWORD\n        }\n    })\n} catch (error) {\n    console.log(error);\n}\n\nexport {\n    transporter\n}\n\n","import type { EmailType } from \"../../interfaces/email/email.interface.js\";\n\nexport const emailLayout = (content:string,emailType:EmailType) => {\n\n    let headerTitle;\n\n    switch (emailType) {\n      case \"welcome\":\n        headerTitle = \"Welcome to Baatchit!\";\n        break;\n      case \"resetPassword\":\n        headerTitle = \"Reset Your Baatchit Password\";\n        break;\n      case \"privateKeyRecovery\":\n        headerTitle = \"Verify Private Key Recovery\";\n        break;\n      case \"OTP\":\n        headerTitle = \"Verify Your Baatchit Account\";\n        break;\n      default:\n        headerTitle = \"Baatchit\";\n    }\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n                background-color: #f4f4f4;\n                margin: 0;\n                padding: 0;\n            }\n            .container {\n                background-color: #ffffff;\n                max-width: 600px;\n                margin: 20px auto;\n                padding: 20px;\n                border-radius: 8px;\n                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                line-height: 1.6;\n            }\n            .header {\n                text-align: center;\n                border-bottom: 1px solid #dddddd;\n                padding-bottom: 10px;\n                display: flex;\n                align-items: center;\n                column-gap: 1rem;\n            }\n            .header h1 {\n                color: #333333;\n                font-size: 24px;\n                margin: 0;\n            }\n            .content {\n                padding: 20px;\n            }\n            .content p {\n                color: #555555;\n            }\n            button {\n                display: inline-block;\n                padding: 10px 20px;\n                font-size: 16px;\n                background-color: #007bff;\n                color: #ffffff;\n                text-align: center;\n                text-decoration: none;\n                border-radius: 5px;\n                margin-top: 20px;\n                cursor:pointer\n            }\n            .footer {\n                text-align: center;\n                color: #777777;\n                font-size: 12px;\n                padding-top: 10px;\n                border-top: 1px solid #dddddd;\n                margin-top: 30px;\n            }\n            .otp {\n                display: inline-block;\n                background-color: #f7f7f7;\n                padding: 10px 20px;\n                font-size: 24px;\n                letter-spacing: 5px;\n                border-radius: 5px;\n                margin: 20px 0;\n            }\n            a{\n                color:#007bff\n            }\n\n            img {\n            border-radius: 100%;\n            width: 50px;\n            height: 50px;\n            }\n        </style>\n    </head>\n\n    <body>\n    <div class=\"container\">\n\n        <div class=\"header\">\n            <img src=\"https://res.cloudinary.com/dh5fjdce9/image/upload/v1718195665/logo256_nhwcrt.png\" alt=\"Baatchit Logo\" />\n            <h1>${headerTitle}</h1>\n        </div>\n\n        <div class=\"content\">\n            ${content}\n        </div>\n\n        <div class=\"footer\">\n            <p>&copy; 2024 Baatchit. All rights reserved.</p>\n        </div>\n\n    </div>\n    </body>\n    </html>\n    `;\n};\n","import { env } from \"../../schemas/env.schema.js\";\nimport { emailLayout } from \"./email.layout.js\";\n\nconst welcomeEmailBody = (username: string) => {\n    return emailLayout(`\n    <p>Hello ${username},</p>\n    <p>Welcome to Baatchit! We're excited to have you on board. Our application offers a range of features designed to enhance your communication experience:</p>\n    <ul>\n        <li>End-to-End Encryption</li>\n        <li>Private Key Recovery</li>\n        <li>Push Notifications</li>\n        <li>Real-time Messaging</li>\n        <li>Friends Feature</li>\n        <li>Group Chats</li>\n        <li>User Presence</li>\n        <li>Typing Indicators</li>\n        <li>Message Seen Status</li>\n        <li>Edit Messages</li>\n        <li>Delete Message</li>\n        <li>File Sharing</li>\n        <li>GIF Sending</li>\n        <li>Polling</li>\n        <li>OAuth Integration</li>\n        <li>Verification Batdge/li>\n    </ul>\n    <p>We're constantly working to improve Baatchit and add new features. If you have any questions or feedback, feel free to reach out to us at <a href=\"mailto:baatchit.online@gmail.com\">baatchit.online@gmail.com</a>.</p>\n    <p>Thank you for joining us. We look forward to helping you stay connected!</p>\n    <p>Best regards,<br>The Baatchit Team</p>`,'welcome'\n    )\n};\n\nconst resetPasswordBody = (username: string, resetUrl: string) => {\n    return emailLayout(`\n        <p>Hi ${username},</p>\n        <p>We received a request to reset your password for your Baatchit account.</p>\n        <p>To create a new password, please click on the following link:</p>\n        <a href=${resetUrl}>\n            <button>Reset Password</button>\n        </a>\n        <p>This link will expire in 24 hours. If you did not request a password reset, you can safely ignore this email.</p>\n        <p>If you continue to have trouble accessing your account, please contact our support team at <a href=\"mailto:baatchit.online@gmail.com\">baatchit.online@gmail.com</a>.</p>\n        <p>Thanks,</p>\n        <p>The Baatchit Team</p>\n    `,'resetPassword')\n};\n\nconst otpVerificationBody = (username: string, otp: string) => {\n    return emailLayout(`\n        <p>Hi ${username},</p>\n        <p>A verification code is required to access your Baatchit account.</p>\n        <p>Your one-time verification code (OTP) is:</p>\n        <p class='otp'>${otp}</p>\n        <p>This code is valid for ${env.OTP_EXPIRATION_MINUTES} minutes. Please enter it on the verification page to proceed.</p>\n        <p>If you did not request OTP verification, you can safely ignore this email.</p>\n        <p>For your security, please do not share this code with anyone.</p>\n        <p>Thanks,</p>\n        <p>The Baatchit Team</p>\n    `,'OTP')\n};\n\nconst privateKeyRecoveryBody = (username:string,verificationUrl:string) => {\n    return emailLayout(`\n        <p>Hello ${username},</p>\n        <p>We received a request to recover the private key associated with your Baatchit account. Your private key is essential for decrypting messages and ensuring the confidentiality of your communication.</p>\n        <p>To ensure the security of your account, we require you to verify this request. If you did not initiate a private key recovery, simply disregard this email. Your account and private key remain safe.</p>\n        <a href=\"${verificationUrl}\">\n            <button>Verify Private Key Recovery</button>\n        </a>\n        <p>For security reasons, this link will expire in ${env.OTP_EXPIRATION_MINUTES} minutes.</p>\n        <p>Thank you for your prompt attention to this matter.</p>\n        <p>Best regards,</p>\n        <p>Baatchit Support Team</p>\n    `,'privateKeyRecovery')\n};\n\n\nexport {\n  resetPasswordBody,\n  otpVerificationBody,\n  welcomeEmailBody,\n  privateKeyRecoveryBody,\n};\n","const resetPasswordSubject = \"Reset Your Password for Baatchit\";\nconst otpVerificationSubject = \"Verify Your Email Address for Baatchit\";\nconst welcomeEmailSubject = \"Welcome to Baatchit! Get Started Today 🚀\";\nconst privateKeyRecoverySubject = \"Action Required: Verify Your Request to Recover Private Key\"\n\nexport {\n    resetPasswordSubject,\n    otpVerificationSubject,\n    welcomeEmailSubject,\n    privateKeyRecoverySubject\n}","import { transporter } from \"../config/nodemailer.config.js\"\nimport { otpVerificationBody, privateKeyRecoveryBody,resetPasswordBody, welcomeEmailBody } from \"../constants/emails/email.body.js\"\nimport { otpVerificationSubject, privateKeyRecoverySubject, resetPasswordSubject, welcomeEmailSubject } from \"../constants/emails/email.subject.js\"\nimport type { EmailType } from \"../interfaces/email/email.interface.js\"\nimport { env } from \"../schemas/env.schema.js\"\n\nexport const sendMail = async(to:string,username:string,type:EmailType,resetUrl?:string,otp?:string,verificationUrl?:string)=>{\n    await transporter.sendMail({\n        from:env.EMAIL, \n        to,\n        subject:type==='OTP'?otpVerificationSubject:type==='resetPassword'?resetPasswordSubject:type==='welcome'?welcomeEmailSubject:privateKeyRecoverySubject,\n        html:type==='OTP'?otpVerificationBody(username,otp!):type==='resetPassword'?resetPasswordBody(username,resetUrl!):type==='welcome'?welcomeEmailBody(username):privateKeyRecoveryBody(username,verificationUrl!),\n    })\n}","import { UploadApiResponse } from \"cloudinary\";\nimport { NextFunction, Response } from \"express\";\nimport type { AuthenticatedRequest } from \"../interfaces/auth/auth.interface.js\";\nimport { prisma } from \"../lib/prisma.lib.js\";\nimport { deleteFilesFromCloudinary, uploadFilesToCloudinary } from \"../utils/auth.util.js\";\nimport { sendMail } from \"../utils/email.util.js\";\nimport { CustomError, asyncErrorHandler } from \"../utils/error.utils.js\";\n\nexport const udpateUser  = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n        \n        if(!req.file){\n            return next(new CustomError(\"Please provide an image\",400))\n        }\n\n        let uploadResults:UploadApiResponse[] | undefined\n        const existingAvatarPublicId = req.user.avatarCloudinaryPublicId\n\n        if(!existingAvatarPublicId){\n            uploadResults = await uploadFilesToCloudinary({files:[req.file]})\n            if(!uploadResults){\n                return next(new CustomError(\"Some error occured\",500))\n            }\n        }\n        else{\n            const cloudinaryFilePromises = [\n                deleteFilesFromCloudinary({publicIds:[existingAvatarPublicId]}),\n                uploadFilesToCloudinary({files:[req.file]})\n            ]\n            const [_,result] = await Promise.all(cloudinaryFilePromises) as [any,UploadApiResponse[] | undefined]\n            if(!result) return next(new CustomError(\"Some error occured\",500))\n            uploadResults = result\n        }\n        \n        const user = await prisma.user.update({\n            where:{\n                id:req.user.id\n            },\n            data:{\n                avatar:uploadResults[0].secure_url,\n                avatarCloudinaryPublicId:uploadResults[0].public_id\n            }\n        })\n\n        const secureUserInfo = {\n            id:user.id,\n            name:user.name,\n            username:user.username,\n            avatar:user.avatar,\n            email:user.email,\n            createdAt:user.createdAt,\n            updatedAt:user.updatedAt,\n            emailVerified:user.emailVerified,\n            publicKey:user.publicKey,\n            notificationsEnabled:user.notificationsEnabled,\n            verificationBadge:user.verificationBadge,\n            fcmToken:user.fcmToken,\n            oAuthSignup:user.oAuthSignup\n        }\n        return res.status(200).json(secureUserInfo)\n    }\n)\n\nexport const testEmailHandler = asyncErrorHandler(async(req:AuthenticatedRequest,res:Response,next:NextFunction)=>{\n\n    const {emailType} = req.query\n\n    if(emailType === 'welcome'){\n        await sendMail(req.user.email,req.user.username,'welcome',undefined,undefined,undefined)\n        return res.status(200).json({message:`sent ${emailType}`})\n    }\n\n    if(emailType==='resetPassword'){\n        await sendMail(req.user.email,req.user.username,'resetPassword','https://mernchat.online',undefined,undefined)\n        return res.status(200).json({message:`sent ${emailType}`})\n    }\n\n    if(emailType==='otpVerification'){\n        await sendMail(req.user.email,req.user.username,'OTP',undefined,\"3412\",undefined)\n        return res.status(200).json({message:`sent ${emailType}`})\n    }\n    if(emailType==='privateKeyRecovery'){\n        await sendMail(req.user.email,req.user.username,'privateKeyRecovery',undefined,undefined,'https://mernchat.online')\n        return res.status(200).json({message:`sent ${emailType}`})\n    }\n    res.status(200)\n})\n\n","import { NextFunction } from \"connect\";\nimport cookie from 'cookie';\nimport jwt from 'jsonwebtoken';\nimport { Socket } from \"socket.io\";\nimport { prisma } from \"../lib/prisma.lib.js\";\nimport { CustomError } from \"../utils/error.utils.js\";\n\ntype SessionPayload = {\n    userId: string;\n    expiresAt: Date;\n  };\n\nexport const socketAuthenticatorMiddleware = async(socket:Socket,next:NextFunction)=>{\n\n    try {\n            const token = socket.handshake.query.token as string;\n\n            if (!token) {\n                return next(new CustomError(\"Token missing, please login again\", 401));\n            } \n\n            const secret = 'helloWorld@123'\n            const decodedInfo=jwt.verify(token,secret,{algorithms:[\"HS256\"]}) as SessionPayload;\n        \n            if(!decodedInfo || !decodedInfo.userId){\n                return next(new CustomError(\"Invalid token please login again\",401))\n            }\n        \n            const existingUser = await prisma.user.findUnique({where:{id:decodedInfo.userId}})\n        \n            if(!existingUser){\n                return next(new CustomError('Invalid Token, please login again',401))\n            }\n        \n            socket.user=existingUser\n            next()\n        }\n        \n    catch (error) {\n        console.log(error);\n        return next(new CustomError(\"Invalid Token, please login again\", 401))\n    }\n\n}","import { Server, Socket } from \"socket.io\";\nimport { Events } from \"../../enums/event/event.enum.js\";\nimport { userSocketIds } from \"../../index.js\";\nimport { prisma } from \"../../lib/prisma.lib.js\";\nimport { sendPushNotification } from \"../../utils/generic.js\";\n\ntype CallUserEventReceivePayload = {\n  calleeId: string;\n  offer: RTCSessionDescriptionInit;\n};\n\ntype IncomingCallEventSendPayload = {\n  caller: {\n    id:string;\n    username:string;\n    avatar:string;\n  };\n  offer: RTCSessionDescriptionInit;\n  callHistoryId:string\n};\n\ntype CallAcceptedEventReceivePayload = {\n  callerId: string;\n  answer: RTCSessionDescriptionInit;\n  callHistoryId:string\n};\n\ntype CallAcceptedEventSendPayload = {\n  calleeId: string;\n  answer: RTCSessionDescriptionInit;\n  callHistoryId:string\n};\n\ntype NegoNeededEventReceivePayload = {\n  calleeId: string;\n  offer: RTCSessionDescriptionInit;\n  callHistoryId:string\n};\n\ntype NegoNeededEventSendPayload = {\n  offer: RTCSessionDescriptionInit;\n  callerId: string;\n  callHistoryId:string\n};\n\ntype NegoDoneEventReceivePayload = {\n  answer: RTCSessionDescriptionInit;\n  callerId:string\n  callHistoryId:string\n};\n\ntype NegoFinalEventSendPayload = {\n  answer: RTCSessionDescriptionInit;\n  calleeId: string;\n};\n\ntype CallEndEventReceivePayload = {\n    callHistoryId:string\n    wasCallAccepted:boolean\n}\n\ntype CallRejectedEventReceivePayload = {\n    callHistoryId:string\n}\n\ntype CalleeBusyEventReceivePayload = {\n    callerId:string;\n}\n\ntype IceCandidateEventReceivePayload = {\n    candidate: RTCIceCandidate;\n    calleeId:string;\n}\n\ntype IceCandiateEventSendPayload = {\n    candidate: RTCIceCandidate;\n    callerId:string;\n}\n\ntype CallIdEventSendPayload = {\n    callHistoryId:string\n}\n\n\nconst registerWebRtcHandlers = (socket: Socket,io:Server) => {\n\n\n    socket.on(Events.CALL_USER,async({calleeId,offer}:CallUserEventReceivePayload)=>{\n        try {\n            console.log('call user event received from',socket.user.username);\n    \n            const calleeSocketId = userSocketIds.get(calleeId);\n    \n            if(!calleeSocketId){\n                socket.emit(Events.CALLEE_OFFLINE);\n                socket.emit(Events.CALL_END);\n\n                await prisma.callHistory.create({\n                    data:{\n                        callerId:socket.user.id,\n                        calleeId:calleeId,\n                        status:\"MISSED\"\n                    }\n                })\n\n                const calleeInfo =  await prisma.user.findUnique({\n                    where:{id:calleeId},\n                    select:{notificationsEnabled:true,fcmToken:true}\n                });\n\n                if(calleeInfo && calleeInfo.notificationsEnabled && calleeInfo.fcmToken){\n                    sendPushNotification({fcmToken:calleeInfo.fcmToken,body:`You have missed a call from ${socket.user.username}`,title:\"Missed Call\"})\n                }\n                console.log('Callee is offline');\n                return;\n            }\n            \n            const newCall =  await prisma.callHistory.create({\n                data:{\n                    callerId:socket.user.id,\n                    calleeId:calleeId,\n                }\n            })\n            const payload:IncomingCallEventSendPayload = {\n                caller:{\n                    id:socket.user.id,\n                    username:socket.user.username,\n                    avatar:socket.user.avatar\n                },\n                offer,\n                callHistoryId:newCall.id\n            }\n            \n            // sending the callId to the caller as well because if the caller wants to cancel the call he can\n            const callIdEventSendPayload:CallIdEventSendPayload = {\n                callHistoryId:newCall.id\n            }\n            socket.emit(Events.CALL_ID,callIdEventSendPayload);\n\n            console.log('emitting incoming call event to',calleeSocketId);\n    \n            io.to(calleeSocketId).emit(Events.INCOMING_CALL,payload);\n            \n        } catch (error) {\n            console.log('Error in CALL_USER event',error);\n            socket.emit(Events.CALL_END);\n        }        \n    })\n    \n    socket.on(Events.CALL_ACCEPTED,async({answer,callerId,callHistoryId}:CallAcceptedEventReceivePayload)=>{\n        try {\n            const callerSocketId = userSocketIds.get(callerId);\n            \n            if(!callerSocketId){ // caller went offline\n                // so we need to update the call status and free both caller and callee from busy list\n                const call =  await prisma.callHistory.findUnique({where:{id:callHistoryId}})\n                if(!call){\n                    console.log('Some Error occured');\n                    return;\n                }\n                await prisma.callHistory.update({\n                    where:{id:callHistoryId},\n                    data:{\n                        status:\"MISSED\",\n                    }\n                })\n\n                const calleeSocketId = userSocketIds.get(call.calleeId);\n                if(calleeSocketId){\n                    io.to(calleeSocketId).emit(Events.CALL_END);\n                    io.to(calleeSocketId).emit(Events.CALLER_OFFLINE);\n                }\n                return;\n            }\n    \n            const payload:CallAcceptedEventSendPayload = {\n                calleeId:socket.user.id,\n                answer,\n                callHistoryId\n            }\n    \n            socket.to(callerSocketId).emit(Events.CALL_ACCEPTED,payload);\n            \n        } catch (error) {\n            console.log('Error in CALL_ACCEPTED event',error);\n        }\n    })\n\n    socket.on(Events.CALL_REJECTED,async({callHistoryId}:CallRejectedEventReceivePayload)=>{\n\n        const call =  await prisma.callHistory.findUnique({\n            where:{id:callHistoryId}\n        })\n        try {\n            if(!call){\n                console.log(`Call not found for callHistoryId: ${callHistoryId}`);\n                return;\n            }\n    \n            const updatedCall = await prisma.callHistory.update({\n                where:{id:call.id},\n                data:{status:\"REJECTED\"}\n            })\n            \n            \n            const callerSocketId = userSocketIds.get(updatedCall.callerId);\n            const calleeSocketId = userSocketIds.get(updatedCall.calleeId);\n            \n            if(callerSocketId){\n                socket.to(callerSocketId).emit(Events.CALL_REJECTED);\n                socket.to(callerSocketId).emit(Events.CALL_END);\n            }\n\n            if(calleeSocketId){\n                io.to(calleeSocketId).emit(Events.CALL_END);\n            }\n\n        } catch (error) {\n            console.log('Error in CALL_REJECTED event',error);\n        }\n    })\n    \n    socket.on(Events.CALL_END,async({callHistoryId,wasCallAccepted}:CallEndEventReceivePayload)=>{\n\n        try {\n            const ongoingCall = await prisma.callHistory.findUnique({where: {id:callHistoryId}});\n    \n            if(!ongoingCall){\n                console.log(`Ongoing call not found for callHistoryId: ${callHistoryId}`);\n                return;\n            }\n    \n            await prisma.callHistory.update({\n                where:{id:ongoingCall.id},\n                data:{\n                    endedAt:new Date(),\n                    duration: Math.floor((new Date().getTime() - ongoingCall.startedAt.getTime()) / 1000), \n                    status: !wasCallAccepted ? \"MISSED\" : \"COMPLETED\"\n                }\n            })\n    \n            const callerSocketId = userSocketIds.get(ongoingCall.callerId);\n            const calleeSocketId = userSocketIds.get(ongoingCall.calleeId);\n        \n            if(callerSocketId){\n                io.to(callerSocketId).emit(Events.CALL_END);\n            }\n            if(calleeSocketId){\n                io.to(calleeSocketId).emit(Events.CALL_END);\n            }\n            \n        } catch (error) {\n            console.error(`Error in CALL_END event for callHistoryId: ${callHistoryId}`, error);\n        }\n    })\n\n    socket.on(Events.CALLEE_BUSY,({callerId}:CalleeBusyEventReceivePayload)=>{\n        const callerSocketId = userSocketIds.get(callerId);\n        if(callerSocketId){\n            socket.to(callerSocketId).emit(Events.CALLEE_BUSY);\n            socket.to(callerSocketId).emit(Events.CALL_END);\n        }\n    })\n    \n    socket.on(Events.ICE_CANDIDATE,async({candidate,calleeId}:IceCandidateEventReceivePayload)=>{\n        console.log('ice candiate receive from ',socket.user.username);\n        const calleeSocketId = userSocketIds.get(calleeId);\n        if(!calleeSocketId){\n            console.log('Callee is offline during ice candidate exchange');\n            return;\n        }\n\n        const payload:IceCandiateEventSendPayload = {\n            callerId:socket.user.id,\n            candidate\n        }\n        io.to(calleeSocketId).emit(Events.ICE_CANDIDATE,payload);\n    })\n\n    socket.on(Events.NEGO_NEEDED,async({offer,calleeId,callHistoryId}:NegoNeededEventReceivePayload)=>{\n\n        try {\n            const calleeSocketId = userSocketIds.get(calleeId);\n            \n            if(!calleeSocketId){\n                // so we need to update the call status and free both caller and callee from busy list\n                const call =  await prisma.callHistory.findUnique({where:{id:callHistoryId}})\n                if(!call){\n                    console.error(`Call history not found for callHistoryId: ${callHistoryId}`);\n                    return;\n                }\n                await prisma.$transaction([\n                    prisma.callHistory.update({\n                        where: { id: callHistoryId },\n                        data: { status: \"MISSED\" }\n                    })\n                ]);\n                \n                \n                const callerSocketId = userSocketIds.get(call.callerId);\n                if(callerSocketId){\n                    io.to(callerSocketId).emit(Events.CALLEE_OFFLINE);\n                    io.to(callerSocketId).emit(Events.CALL_END);\n                }\n                return;\n            }\n\n            const payload:NegoNeededEventSendPayload = {\n                offer,\n                callerId:socket.user.id,\n                callHistoryId\n            }\n            socket.to(calleeSocketId).emit(Events.NEGO_NEEDED,payload);        \n            \n        } catch (error) {\n            console.log('Error in NEGO_NEEDED event',error);\n        }\n    })\n    \n    socket.on(Events.NEGO_DONE,async({answer,callerId,callHistoryId}:NegoDoneEventReceivePayload)=>{\n        try {\n            const callerSocketId = userSocketIds.get(callerId);\n            \n            if(!callerSocketId){\n                // so we need to update the call status and free both caller and callee from busy list\n                const call =  await prisma.callHistory.findUnique({where:{id:callHistoryId}})\n                if(!call){\n                    console.warn(`Call history not found or already updated for callHistoryId: ${callHistoryId}`);\n                    return;\n                }\n                await prisma.$transaction([\n                    prisma.callHistory.update({\n                        where: { id: callHistoryId },\n                        data: { status: \"MISSED\" }\n                    })\n                ]);\n                \n                \n                const calleeSocketId = userSocketIds.get(call.calleeId);\n                \n                if(calleeSocketId){\n                    io.to(calleeSocketId).emit(Events.CALL_END);\n                    io.to(calleeSocketId).emit(Events.CALLER_OFFLINE);\n                }\n                return;\n            }\n    \n            const payload:NegoFinalEventSendPayload = {\n                answer,\n                calleeId:socket.user.id\n            }\n    \n            socket.to(callerSocketId).emit(Events.NEGO_FINAL,payload)\n        } catch (error) {\n            console.log('Error in NEGO_DONE event',error);\n        }\n    })\n};\n\nexport default registerWebRtcHandlers;\n","import { Prisma } from \"@prisma/client\";\nimport { UploadApiResponse } from \"cloudinary\";\nimport { Server, Socket } from \"socket.io\";\nimport { Events } from \"../enums/event/event.enum.js\";\nimport { userSocketIds } from \"../index.js\";\nimport { prisma } from \"../lib/prisma.lib.js\";\nimport { deleteFilesFromCloudinary, uploadAudioToCloudinary, uploadEncryptedAudioToCloudinary } from \"../utils/auth.util.js\";\nimport { sendPushNotification } from \"../utils/generic.js\";\nimport registerWebRtcHandlers from \"./webrtc/socket.js\";\n\ntype MessageEventReceivePayload = {\n    chatId:string\n    isPollMessage:boolean\n    textMessageContent?:string | ArrayBuffer\n    encryptedAudio?:Uint8Array<ArrayBuffer>\n    audio?:Uint8Array<ArrayBuffer>\n    url?:string\n    pollData?:{\n        pollQuestion?:string\n        pollOptions?:string[]\n        isMultipleAnswers?:boolean\n    },\n    replyToMessageId?:string\n}\n\n\ntype UnreadMessageEventSendPayload = {\n    chatId:string,\n    message?:{\n        textMessageContent?:string | undefined | null\n        url?:boolean | undefined | null\n        attachments?:boolean\n        poll?:boolean\n        createdAt:Date\n        audio?:boolean\n    },\n    sender:{\n        id:string,\n        avatar:string,\n        username:string\n    }\n}\n\ntype MessageSeenEventReceivePayload = {\n    chatId:string\n}\n\ntype MessageSeenEventSendPayload = {\n    user:{\n        id:string\n        username:string\n        avatar:string\n    },\n    chatId:string,\n    readAt:Date\n}\n\ntype MessageEditEventReceivePayload = {\n    chatId:string\n    messageId:string\n    updatedTextContent:string\n}\n\ntype MessageEditEventSendPayload = {\n    chatId:string\n    messageId:string\n    updatedTextMessageContent:string\n}\n\ntype MessageDeleteEventReceivePayload = {\n    chatId:string\n    messageId:string\n}\n\ntype MessageDeleteEventSendPayload  = MessageDeleteEventReceivePayload\n\ntype NewReactionEventReceivePayload = {\n    chatId:string\n    messageId:string\n    reaction:string\n}\n\ntype NewReactionEventSendPayload = {\n    chatId:string\n    messageId:string\n    user:{\n        id:string\n        username:string\n        avatar:string\n    }\n    reaction:string\n}\n\ntype DeleteReactionEventReceivePayload = {\n    chatId:string\n    messageId:string\n}\n\ntype DeleteReactionEventSendPayload = {\n    chatId:string\n    messageId:string\n    userId:string\n}\n\ntype UserTypingEventReceivePayload = {\n    chatId:string\n}\n\ntype UserTypingEventSendPayload = {\n    user:{\n        id:string\n        username:string\n        avatar:string\n    },\n    chatId:string\n}\n\ntype VoteInEventReceivePayload = {\n    chatId:string\n    messageId:string\n    optionIndex:number\n}\n\ntype VoteInEventSendPayload = {\n    messageId:string\n    user:{\n        id:string\n        avatar:string\n        username:string\n    }\n    optionIndex:number,\n    chatId:string\n}\n\ntype VoteOutEventReceivePayload = VoteInEventReceivePayload\n\ntype VoteOutEventSendPayload = {\n    chatId:string\n    messageId:string\n    userId:string\n    optionIndex:number\n}\n\ntype OfflineUserEventSendPayload = {\n    userId:string\n}\n\ntype OnlineUserEventSendPayload = OfflineUserEventSendPayload\n\ntype OnlineUsersListEventSendPayload = {\n    onlineUserIds:string[]\n}\n\ntype PinMessageEventReceivePayload = {\n    chatId:string\n    messageId:string\n}\n\ntype UnpinMessageEventReceivePayload = {\n    pinId:string\n}\ntype UnpinMessageEventSendPayload = {\n    pinId:string\n    chatId:string\n    messageId:string\n}\n\ntype PinLimitReachedEventSendPayload = {\n    oldestPinId:string\n    messageId:string\n    chatId:string\n}\n\nconst registerSocketHandlers = (io:Server)=>{\n    \n    io.on(\"connection\",async(socket:Socket)=>{\n\n        console.log(socket.user.username,\"connected\");\n\n        await prisma.user.update({\n            where:{id:socket.user.id},\n            data:{isOnline:true}\n        })\n\n        userSocketIds.set(socket.user.id,socket.id)\n        \n        // telling everyone that user is online\n        const payload:OnlineUserEventSendPayload = {\n            userId:socket.user.id\n        }\n        socket.broadcast.emit(Events.ONLINE_USER,payload)\n        \n        // getting all other online users\n        const onlineUserIds = Array.from(userSocketIds.keys());\n\n        // sending the online users to the user who just connected\n        let payloadOnlineUsers:OnlineUsersListEventSendPayload = {\n            onlineUserIds,\n        }\n        socket.emit(Events.ONLINE_USERS_LIST, payloadOnlineUsers);\n\n        // getting all chats of the user\n        const userChats = await prisma.chatMembers.findMany({\n            where:{\n                userId:socket.user.id\n            },\n            select:{chatId:true}\n        })\n        \n        // joining the user to all of its chats via chatIds (i.e rooms)\n        const chatIds = userChats.map(({chatId})=>chatId);\n        socket.join(chatIds)\n\n        socket.on(Events.MESSAGE,async({chatId,isPollMessage,pollData,textMessageContent,url,encryptedAudio,audio,replyToMessageId}:MessageEventReceivePayload)=>{\n            \n            try{\n\n            let newMessage:Partial<Prisma.MessageCreateInput>\n\n            if(audio){\n                const uploadResult =  await uploadAudioToCloudinary({buffer:audio}) as UploadApiResponse | undefined;\n                if(!uploadResult) return;\n                newMessage = await prisma.message.create({\n                    data:{\n                        senderId:socket.user.id,\n                        chatId:chatId,\n                        isTextMessage:false,\n                        isPollMessage:false,\n                        audioPublicId:uploadResult.public_id,\n                        audioUrl:uploadResult.secure_url,\n                        replyToMessageId\n                    },\n                })\n            }\n\n            else if(encryptedAudio){\n                const uploadResult = ( await uploadEncryptedAudioToCloudinary({buffer:encryptedAudio})) as UploadApiResponse | undefined;\n                if(!uploadResult) return;\n                \n                newMessage = await prisma.message.create({\n                    data:{\n                        senderId:socket.user.id,\n                        chatId:chatId,\n                        isTextMessage:false,\n                        isPollMessage:false,\n                        audioPublicId:uploadResult.public_id,\n                        audioUrl:uploadResult.secure_url,\n                        replyToMessageId\n                    },\n                })\n            \n            }\n            \n            else if(isPollMessage && pollData?.pollOptions && pollData.pollQuestion){\n\n                const newPoll =  await prisma.poll.create({\n                    data:{\n                        question:pollData.pollQuestion,\n                        options:pollData.pollOptions,\n                        multipleAnswers:pollData.isMultipleAnswers ? pollData.isMultipleAnswers : false\n                    }\n                })\n\n                newMessage = await prisma.message.create({\n                    data:{\n                        senderId:socket.user.id,\n                        chatId:chatId,\n                        pollId:newPoll.id,\n                        isPollMessage:true,\n                        isTextMessage:false,\n                        replyToMessageId\n                    },\n                })\n            }\n            else if(url){\n                newMessage = await prisma.message.create({\n                    data:{\n                        senderId:socket.user.id,\n                        chatId:chatId,\n                        url,\n                        isPollMessage:false,\n                        isTextMessage:false,\n                        replyToMessageId\n                    },\n                })\n            }\n            else{\n                newMessage =  await prisma.message.create({\n                    data:{\n                        senderId:socket.user.id,\n                        chatId:chatId,\n                        isPollMessage:false,\n                        isTextMessage:true,\n                        textMessageContent:textMessageContent as string,\n                        replyToMessageId\n                    },\n                })\n            }\n\n            const currentChat =  await prisma.chat.update({\n                where:{id:chatId},\n                data:{latestMessageId:newMessage.id},\n                include:{\n                    ChatMembers:{\n                        select:{\n                            user:{\n                                select:{\n                                    id:true,\n                                    isOnline:true,\n                                    notificationsEnabled:true,\n                                    fcmToken:true,\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n\n            const message = await prisma.message.findUnique({\n                where:{chatId:chatId,id:newMessage.id},\n                include:{\n                    sender:{\n                      select:{\n                        id:true,\n                        username:true,\n                        avatar:true,\n                      }\n                    },\n                    attachments:{\n                      select:{\n                        secureUrl:true,\n                      }\n                    },\n                    poll:{\n                      omit:{\n                        id:true,\n                      },\n                      include:{\n                        votes:{\n                          include:{\n                            user:{\n                              select:{\n                                id:true,\n                                username:true,\n                                avatar:true\n                              }\n                            }\n                          },\n                          omit:{\n                            id:true,\n                            pollId:true,\n                            userId:true,\n                          }\n                        },\n                      }\n                    },\n                    reactions:{\n                      select:{\n                        user:{\n                          select:{\n                            id:true,\n                            username:true,\n                            avatar:true\n                          }\n                        },\n                        reaction:true,\n                      }\n                    },\n                    replyToMessage:{\n                        select:{\n                          sender:{\n                            select:{\n                              id:true,\n                              username:true,\n                              avatar:true,\n                            }\n                          },\n                          id:true,\n                          textMessageContent:true,\n                          isPollMessage:true,\n                          url:true,\n                          audioUrl:true,\n                          attachments:{\n                            select:{\n                              secureUrl:true\n                            }\n                          }\n                        }\n                    },\n                  },\n                omit:{\n                    senderId:true,\n                    pollId:true,\n                    audioPublicId:true,\n                },\n            })\n            \n            io.to(chatId).emit(Events.MESSAGE,{...message,isNew:true})\n\n            const currentChatMembers = currentChat.ChatMembers.filter(({user:{id}})=>id!=socket.user.id)\n            \n            const updateOrCreateUnreadMessagePromises = currentChatMembers.map(async(member)=>{\n\n                if(!member.user.isOnline && member.user.notificationsEnabled && member.user.fcmToken){\n                    sendPushNotification({fcmToken:member.user.fcmToken,body:`New message from ${socket.user.username}`})\n                }\n    \n                const isExistingUnreadMessage = await prisma.unreadMessages.findUnique({\n                    where:{\n                        userId_chatId:{\n                            userId:member.user.id,\n                            chatId:chatId\n                        }\n                    }\n                })\n    \n                if(isExistingUnreadMessage){\n                    return prisma.unreadMessages.update({\n                        where:{\n                            userId_chatId:{\n                                userId:member.user.id,\n                                chatId:chatId\n                            }\n                        },\n                        data:{\n                            count:{\n                                increment:1\n                            },\n                            messageId:newMessage.id\n                        }\n                    })\n                }\n                else{\n                    return prisma.unreadMessages.create({\n                        data:{\n                            userId:member.user.id,\n                            chatId:chatId,\n                            count:1,\n                            senderId:socket.user.id,\n                            messageId:newMessage.id!\n                        }\n                    })\n                }\n            })\n\n            await Promise.all(updateOrCreateUnreadMessagePromises)\n    \n            const unreadMessagePayload:UnreadMessageEventSendPayload = {\n                chatId:chatId,\n                message:{\n                    textMessageContent:newMessage.isTextMessage ? newMessage.textMessageContent : undefined,\n                    url:newMessage.url ? true : false,\n                    attachments:false,\n                    poll:newMessage.isPollMessage ? true : false,\n                    audio:newMessage.audioPublicId ? true : false,\n                    createdAt:newMessage.createdAt as Date\n                },\n                sender:{\n                    id:socket.user.id,\n                    avatar:socket.user.avatar!,\n                    username:socket.user.username\n                }\n            }\n    \n            io.to(chatId).emit(Events.UNREAD_MESSAGE,unreadMessagePayload)\n\n        } catch (error) {\n            console.log('Error sending message:', error);\n        }\n        })\n\n        socket.on(Events.MESSAGE_SEEN,async({chatId}:MessageSeenEventReceivePayload)=>{\n\n            try{\n            const doesUnreadMessageExists =  await prisma.unreadMessages.findUnique({\n                where:{\n                    userId_chatId:{\n                        userId:socket.user.id,\n                        chatId,\n                    }\n                }\n            })\n            \n            if(!doesUnreadMessageExists) return;\n            const unreadMessageData = await prisma.unreadMessages.update({\n                where:{\n                    id:doesUnreadMessageExists.id\n                },\n                data:{\n                    count:0,\n                    readAt:new Date\n                }\n            })\n\n            const payload:MessageSeenEventSendPayload = {\n                user:{\n                    id:socket.user.id,\n                    username:socket.user.username,\n                    avatar:socket.user.avatar\n                },\n                chatId,\n                readAt:unreadMessageData.readAt!,\n            }\n            io.to(chatId).emit(Events.MESSAGE_SEEN,payload)\n\n        } catch (error) {\n            console.log('Error marking message as seen:', error)\n        }\n        })\n\n        socket.on(Events.MESSAGE_EDIT,async({chatId,messageId,updatedTextContent}:MessageEditEventReceivePayload)=>{\n            try{\n            const message =  await prisma.message.update({\n                where:{\n                    chatId,\n                    id:messageId\n                },\n                data:{\n                    textMessageContent:updatedTextContent,\n                    isEdited:true,\n                }\n            })\n\n            const payload:MessageEditEventSendPayload = {\n                updatedTextMessageContent:message.textMessageContent!,\n                chatId,\n                messageId\n            }\n\n            io.to(chatId).emit(Events.MESSAGE_EDIT,payload)\n        } catch (error) {\n            console.log('Error editing message:', error);\n        }\n        })\n\n        socket.on(Events.MESSAGE_DELETE,async({chatId,messageId}:MessageDeleteEventReceivePayload)=>{\n            \n            try {\n                await prisma.pinnedMessages.deleteMany({where:{messageId}});\n                \n                // if this message had any replies, then breaking the connection of the replies with this message\n                // and this message will be deleted\n                await prisma.message.updateMany({\n                    where: { replyToMessageId: messageId },\n                    data:{replyToMessageId:null},\n                });\n\n    \n                // deleting unreadMessages of this message\n                await prisma.unreadMessages.deleteMany({ where: { messageId } });\n    \n                // deleting reactions of this message\n                await prisma.reactions.deleteMany({ where: { messageId } });\n    \n    \n                const messageToBeDeleted =  await prisma.message.findUnique({\n                    where:{chatId,id:messageId},\n                    select:{audioPublicId:true,attachments:{select:{cloudinaryPublicId:true}}}});\n    \n                if(!messageToBeDeleted) return;\n    \n                let publicIds:string[] = [];\n    \n                // Delete files from Cloudinary first\n                if (messageToBeDeleted?.attachments.length) {\n                    console.log('deleting attachments from Cloudinary');\n                    const cloudinaryPublicIdsOfAttachments =  messageToBeDeleted?.attachments.map(({ cloudinaryPublicId }) => cloudinaryPublicId);\n                    publicIds.push(...cloudinaryPublicIdsOfAttachments);\n                    await prisma.attachment.deleteMany({ where: { messageId } });\n                }\n    \n                if(messageToBeDeleted?.audioPublicId){\n                    console.log('deleting audio from Cloudinary');\n                    publicIds.push(messageToBeDeleted.audioPublicId);\n                }\n                \n                if(publicIds.length){\n                    await deleteFilesFromCloudinary({publicIds});\n                }\n    \n                // Now safely delete the original message\n                const deletedMessage = await prisma.message.delete({\n                    where: { id: messageId },\n                    select:{id:true}\n                });\n    \n                if(deletedMessage.id){\n                    const payload:MessageDeleteEventSendPayload = {\n                        messageId:deletedMessage.id,\n                        chatId,\n                    }\n                    io.to(chatId).emit(Events.MESSAGE_DELETE,payload)\n                }\n            } catch (error) {\n                console.log('Error deleting message:', error);\n            }\n        })\n        \n        socket.on(Events.NEW_REACTION,async({chatId,messageId,reaction}:NewReactionEventReceivePayload)=>{\n            try{\n            const result =  await prisma.reactions.findFirst({\n                where:{\n                    userId:socket.user.id,\n                    messageId\n                }\n            })\n\n            if(result) return;\n\n            await prisma.reactions.create({\n                data:{\n                    reaction,\n                    userId:socket.user.id,\n                    messageId,\n                }\n            })\n\n            const payload:NewReactionEventSendPayload = {\n                chatId,\n                messageId,\n                user:{\n                    id:socket.user.id,\n                    username:socket.user.username,\n                    avatar:socket.user.avatar\n                },\n                reaction,\n            }\n\n            io.to(chatId).emit(Events.NEW_REACTION,payload)\n        } catch (error) {\n            console.log('Error adding reaction:', error);\n        }\n\n        })\n\n        socket.on(Events.DELETE_REACTION,async({chatId,messageId}:DeleteReactionEventReceivePayload)=>{\n            try{\n            await prisma.reactions.deleteMany({\n                where:{\n                    userId:socket.user.id,\n                    messageId\n                }\n            })\n            const payload:DeleteReactionEventSendPayload = {\n                chatId,\n                messageId,\n                userId:socket.user.id \n            }\n            io.to(chatId).emit(Events.DELETE_REACTION,payload)\n        } catch (error) {\n            console.log('Error deleting reaction:', error);\n        }\n        })\n\n        socket.on(Events.USER_TYPING,({chatId}:UserTypingEventReceivePayload)=>{\n            try{\n            const payload:UserTypingEventSendPayload = {\n                user:{\n                    id:socket.user.id,\n                    username:socket.user.username,\n                    avatar:socket.user.avatar\n                },\n                chatId:chatId,\n            }\n\n            socket.broadcast.to(chatId).emit(Events.USER_TYPING,payload)\n        } catch (error) {\n            console.log('Error user typing:', error);\n        }\n        })\n\n        socket.on(Events.VOTE_IN,async({chatId,messageId,optionIndex}:VoteInEventReceivePayload)=>{\n            console.log('vote in received');\n\n            try {\n                const isValidPoll = await prisma.message.findFirst({\n                    where:{chatId,id:messageId},\n                    include:{\n                        poll:{\n                            select:{\n                                id:true\n                            }\n                        }\n                    }\n                })\n    \n                if(!isValidPoll?.poll?.id) return \n                \n                await prisma.vote.create({\n                    data:{\n                        pollId:isValidPoll.poll.id,\n                        userId:socket.user.id,\n                        optionIndex\n                    }\n                })\n    \n                const payload:VoteInEventSendPayload = {\n                    messageId,\n                    optionIndex,\n                    user:{\n                        id:socket.user.id,\n                        avatar:socket.user.avatar,\n                        username:socket.user.username\n                    },\n                    chatId\n                }\n                io.to(chatId).emit(Events.VOTE_IN,payload)\n                \n            } catch (error) {\n                console.log('error in vote in:', error);\n            }\n        })\n\n        socket.on(Events.VOTE_OUT,async({chatId,messageId,optionIndex}:VoteOutEventReceivePayload)=>{\n            console.log('vote out received');\n\n            try {\n                const isValidPoll = await prisma.message.findFirst({\n                    where:{chatId,id:messageId},\n                    include:{\n                        poll:{\n                            select:{\n                                id:true\n                            }\n                        }\n                    },\n                })\n    \n                if(!isValidPoll?.poll?.id) return\n    \n                const vote =  await prisma.vote.findFirst({\n                    where:{\n                        userId:socket.user.id,\n                        pollId:isValidPoll.poll.id,\n                        optionIndex\n                    }\n                })\n    \n                if(!vote) return;\n    \n                await prisma.vote.deleteMany({\n                    where: {\n                        userId:socket.user.id,\n                        pollId:isValidPoll.poll.id,\n                        optionIndex\n                    }\n                });         \n                const payload:VoteOutEventSendPayload = {\n                    chatId,\n                    messageId,\n                    optionIndex,\n                    userId:socket.user.id\n                }\n                io.to(chatId).emit(Events.VOTE_OUT,payload)\n                \n            } catch (error) {\n                console.log('error in vote out:', error);\n            }\n        })\n\n        socket.on(Events.PIN_MESSAGE,async({chatId,messageId}:PinMessageEventReceivePayload)=>{\n            try {\n                console.log('messageId for pinning message is:', messageId);\n                const pinnedMessages = await prisma.pinnedMessages.findMany({\n                    where: { chatId },\n                    orderBy: { createdAt: \"asc\" } // Get the oldest pinned message first\n                });\n\n                if(pinnedMessages.length === 3){\n                    await prisma.pinnedMessages.delete({ where: { id: pinnedMessages[0].id } });\n                    const unpinnedMessage =  await prisma.message.update({where:{id:pinnedMessages[0].messageId},data:{isPinned:false},select:{id:true}});\n                    const payload:PinLimitReachedEventSendPayload = {\n                        oldestPinId:pinnedMessages[0].id,\n                        messageId:unpinnedMessage.id,\n                        chatId\n                    }\n                    io.to(chatId).emit(Events.PIN_LIMIT_REACHED,payload);\n                }\n\n                const pinnedMessage =  await prisma.pinnedMessages.create({\n                    data:{\n                        messageId,\n                        chatId\n                    },\n                    include:{\n                        message:{\n                          include:{\n                            sender:{\n                              select:{\n                                id:true,\n                                username:true,\n                                avatar:true,\n                              }\n                            },\n                            attachments:{\n                              select:{\n                                secureUrl:true,\n                              }\n                            },\n                            poll:{\n                              omit:{\n                                id:true,\n                              },\n                              include:{\n                                votes:{\n                                  include:{\n                                    user:{\n                                      select:{\n                                        id:true,\n                                        username:true,\n                                        avatar:true\n                                      }\n                                    }\n                                  },\n                                  omit:{\n                                    id:true,\n                                    pollId:true,\n                                    userId:true,\n                                  }\n                                },\n                              }\n                            },\n                            reactions:{\n                              select:{\n                                user:{\n                                  select:{\n                                    id:true,\n                                    username:true,\n                                    avatar:true\n                                  }\n                                },\n                                reaction:true,\n                              }\n                            },\n                            replyToMessage:{\n                              select:{\n                                sender:{\n                                  select:{\n                                    id:true,\n                                    username:true,\n                                    avatar:true,\n                                  }\n                                },\n                                id:true,\n                                textMessageContent:true,\n                                isPollMessage:true,\n                                url:true,\n                                audioUrl:true,\n                                attachments:{\n                                  select:{\n                                    secureUrl:true\n                                  }\n                                }\n                              }\n                            }\n                          },\n                          omit:{\n                            senderId:true,\n                            pollId:true,\n                          },\n                        }\n                    },\n                    omit:{\n                        chatId:true,\n                        messageId:true\n                    }\n                })\n                await prisma.message.update({where:{id:messageId},data:{isPinned:true}});\n\n                io.to(chatId).emit(Events.PIN_MESSAGE,pinnedMessage);\n            } catch (error) {\n                console.log('error pinning message:', error);\n            }\n        })\n\n        socket.on(Events.UNPIN_MESSAGE,async({pinId}:UnpinMessageEventReceivePayload)=>{\n            try {\n                const deletedPinnedMessage =  await prisma.pinnedMessages.delete({\n                    where:{\n                        id:pinId\n                    },\n                    select:{\n                        id:true,\n                        chatId:true,\n                        messageId:true\n                    }\n                });\n\n                await prisma.message.update({where:{id:deletedPinnedMessage.messageId},data:{isPinned:false}});\n\n                const payload:UnpinMessageEventSendPayload = {\n                    pinId:deletedPinnedMessage.id,\n                    chatId:deletedPinnedMessage.chatId,\n                    messageId:deletedPinnedMessage.messageId\n                }\n                io.to(deletedPinnedMessage.chatId).emit(Events.UNPIN_MESSAGE,payload);\n            } catch (error) {\n                console.log('error un-pinning message:', error);\n            }\n        })\n\n        registerWebRtcHandlers(socket,io);\n\n        socket.on(\"disconnect\",async()=>{\n\n            await prisma.user.update({\n                where:{\n                    id:socket.user.id\n                },\n                data:{\n                    isOnline:false,\n                    lastSeen:new Date\n                }\n            })\n            userSocketIds.delete(socket.user.id);\n\n            const payload:OfflineUserEventSendPayload = {\n                userId:socket.user.id\n            }\n            socket.broadcast.emit(Events.OFFLINE_USER,payload)\n        })\n})\n}\n\nexport default registerSocketHandlers\n"],"mappings":"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","names":["passport","config","config","cloudinary","cloudinary","io","io","jwt","jwt","Router","passport","jwt","jwt","config","z","Router","passport","config","Router","z","io","io","id","Router","Router","Router","Router","io","z","Router","Router","Router","jwt","jwt","io","io","payload","socket_default","config","passport","socket_default"]}